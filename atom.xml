<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://https://dazhuang0521.github.io/dz521.github.io/</id>
    <title>DaZhuang</title>
    <updated>2020-10-21T15:05:35.750Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://https://dazhuang0521.github.io/dz521.github.io/"/>
    <link rel="self" href="https://https://dazhuang0521.github.io/dz521.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://https://dazhuang0521.github.io/dz521.github.io/images/avatar.png</logo>
    <icon>https://https://dazhuang0521.github.io/dz521.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, DaZhuang</rights>
    <entry>
        <title type="html"><![CDATA[大壮的python学习]]></title>
        <id>https://https://dazhuang0521.github.io/dz521.github.io/post/da-zhuang-de-python-xue-xi/</id>
        <link href="https://https://dazhuang0521.github.io/dz521.github.io/post/da-zhuang-de-python-xue-xi/">
        </link>
        <updated>2020-10-21T14:56:21.000Z</updated>
        <content type="html"><![CDATA[<h1 id="第1章-起步">第1章 起步</h1>
<h3 id="111-你好世界">1.1.1 你好世界</h3>
<h5 id="一句">一句：</h5>
<pre><code>print(&quot;hello Python world!&quot;)
</code></pre>
<h3 id="112-在cmd中运行py文件">1.1.2 在cmd中运行py文件</h3>
<h5 id="打开cmd进入py文件所在目录输入文件名例如hellopy运行即可">打开cmd进入py文件所在目录，输入文件名例如hello.py，运行即可</h5>
<h1 id="第2章-变量和简单数据类型">第2章 变量和简单数据类型</h1>
<h2 id="22-变量">2.2 变量</h2>
<pre><code>message = &quot;hello Python world!&quot;
print(message)

message = &quot;hello Python Crash Course world!&quot;
print(message)
</code></pre>
<h6 id="运行">运行:</h6>
<pre><code>helo Python world!
hello Python Crash Course world!
</code></pre>
<h3 id="221-变量的命名和使用">2.2.1 变量的命名和使用</h3>
<h5 id="变量名只能包括字母-数字-下划线变量名可以字母或下划线打头但不能以数字打头-例如可以将变量命名为message_1但不能命名为1_message">变量名只能包括字母、数字、下划线，变量名可以字母或下划线打头，但不能以数字打头。例如，可以将变量命名为message_1，但不能命名为1_message。</h5>
<h5 id="变量名不能包含空格但可以使用下划线来分隔其中的单词-例如变量名为greeting_message可行但变量名gretting-message会引发错误">变量名不能包含空格，但可以使用下划线来分隔其中的单词。例如，变量名为greeting_message可行，但变量名gretting message会引发错误。</h5>
<h5 id="不要将python关键字和函数名用作变量名">不要将Python关键字和函数名用作变量名。。</h5>
<h5 id="变量名应既简短又具有描述性-例如name比n好student_name比s_n好name_length比length_of_name好">变量名应既简短又具有描述性。例如，name比n好，student_name比s_n好，name_length比length_of_name好。</h5>
<h5 id="慎用小写字母l和大写字母o因为它们可能被人错看成数字1和0">慎用小写字母l和大写字母O，因为它们可能被人错看成数字1和0。</h5>
<h3 id="222-使用变量名时避免命名错误">2.2.2 使用变量名时避免命名错误</h3>
<pre><code>message = &quot;hello Python Crash Course reader!&quot;
print(mesage)
</code></pre>
<h2 id="23-字符串">2.3 字符串</h2>
<pre><code>print(&quot;This is a string.&quot;)
print('This is also a string.')
</code></pre>
<h6 id="运行-2">运行：</h6>
<pre><code>This is a string.
This is also a string.
</code></pre>
<h3 id="231-使用方法修改字符串的大小写">2.3.1 使用方法修改字符串的大小写</h3>
<pre><code>name = &quot;ada lovelace&quot;
print(name.title())
print(name.upper())
print(name.lower())
</code></pre>
<h6 id="运行-3">运行：</h6>
<pre><code>Lovelace
ADA LOVELACE
ada lovelace
</code></pre>
<h3 id="232-合并拼接字符串">2.3.2 合并（拼接）字符串</h3>
<h5 id="合并两个变量">合并两个变量：</h5>
<pre><code>first_name = &quot;ada&quot;
last_name = &quot;lovelace&quot;
full_name = first_name + &quot; &quot; + last_name
print(full_name)
</code></pre>
<h6 id="运行-4">运行：</h6>
<pre><code>ada lovelace
</code></pre>
<h5 id="加入一些方法">加入一些方法：</h5>
<pre><code>first_name = &quot;ada&quot;
last_name = &quot;lovelace&quot;
full_name = first_name + &quot; &quot; + last_name
print(&quot;hello, &quot; + full_name.title() + &quot;!&quot;)
</code></pre>
<h6 id="运行-5">运行：</h6>
<pre><code>hello, Ada Lovelace!
</code></pre>
<h5 id="把一整条消息存储在一个变量中">把一整条消息，存储在一个变量中</h5>
<pre><code>first_name = &quot;ada&quot;
last_name = &quot;lovelace&quot;
full_name = first_name + &quot; &quot; + last_name
message = &quot;hello, &quot; + full_name.title() + &quot;!&quot;
print(message)
</code></pre>
<h6 id="运行-6">运行：</h6>
<pre><code>hello, Ada Lovelace!
</code></pre>
<h3 id="233-使用制表符或换行符来添加空白">2.3.3 使用制表符或换行符来添加空白</h3>
<h5 id="使用制表符t">使用制表符\t</h5>
<pre><code>print(&quot;Python&quot;)
print(&quot;\tPython&quot;)
</code></pre>
<h6 id="运行-7">运行：</h6>
<pre><code>Python
    Python
</code></pre>
<h5 id="使用换行符n">使用换行符\n</h5>
<pre><code>print(&quot;Language:\nPython\nC\nJavaScript&quot;)
</code></pre>
<h6 id="运行-8">运行：</h6>
<pre><code>Language:
Python
C
JavaScript
</code></pre>
<h5 id="同时包含制表符和换行符">同时包含制表符和换行符：</h5>
<pre><code>print(&quot;Languages:\n\tPython\n\tC\n\tJavaScript&quot;)
</code></pre>
<h6 id="运行-9">运行：</h6>
<pre><code>Language:
    Python
    C
    JavaScript
</code></pre>
<h3 id="234-删除空白开头和末尾">2.3.4 删除空白（开头和末尾）</h3>
<h5 id="rstrip删除末尾空白">.rstrip()删除末尾空白</h5>
<pre><code>favorite_language = 'python '
favorite_language.rstrip()
</code></pre>
<h6 id="运行-10">运行：</h6>
<pre><code>'python'
</code></pre>
<h5 id="lstrip删除开头空白">.lstrip()删除开头空白</h5>
<pre><code>favorite_language = ' python'
favorite_language.lstrip()
</code></pre>
<h6 id="运行-11">运行：</h6>
<pre><code>'python'
</code></pre>
<h3 id="235-使用字符串时避免语法错误">2.3.5 使用字符串时避免语法错误</h3>
<h5 id="单双引号">单双引号：</h5>
<pre><code>message = &quot;One of Python's strength is its diverse community.&quot;
print(message)
</code></pre>
<h6 id="在中使用不会打断引号的范围同理在中使用也不会打断反之则会出现错误">在&quot;&quot;中使用'不会打断引号的范围，同理在''中使用&quot;也不会打断，反之则会出现错误。</h6>
<h3 id="241-整数int无short-long之分">2.4.1 整数int，（无short、long之分）</h3>
<h5 id="输入函数type1可显示内的数据类型classint">输入函数type(1)，可显示()内的数据类型：<a href="class:'int'">class:'int'</a></h5>
<h5 id="一些运算法则">一些运算法则：</h5>
<h6 id="乘方-32运行得9">乘方： 3**2，运行得：9</h6>
<h3 id="242-浮点数float无单双精度之分默认为双精度">2.4.2 浮点数float，（无单双精度之分，默认为双精度）</h3>
<h5 id="一些运算法则-2">一些运算法则：</h5>
<h6 id="int-float-float">int + float = float</h6>
<h6 id="int-float-float-2">int * float = float</h6>
<h6 id="int-int-float">int / int = float</h6>
<h6 id="int-int-int-取整除法">int // int = int (取整除法)</h6>
<h3 id="243-使用函数str避免类型错误">2.4.3 使用函数str()避免类型错误</h3>
<pre><code>age = 23
message = &quot;Happy &quot; + age + &quot;rd Birthday!&quot;
print(message)
</code></pre>
<h6 id="运行-12">运行：</h6>
<pre><code>Traceback (most recent call last):
File &quot;D:\VSC\PythonApplication1\PythonApplication1.py&quot;, line 2, in &lt;module&gt;
message = &quot;Happy &quot; + age + &quot;rd Birthday!&quot;
TypeError: can only concatenate str (not &quot;int&quot;) to str
</code></pre>
<h5 id="因为age和message的变量类型不同所以错误">因为age和message的变量类型不同，所以错误</h5>
<h5 id="使用str改变age的类型">使用str()改变age的类型</h5>
<pre><code>age = 23
message = &quot;Happy &quot; + str(age) + &quot;rd Birthday!&quot;
print(message)
</code></pre>
<h6 id="运行-13">运行：</h6>
<pre><code>Happy 23rd Birthday!
</code></pre>
<h3 id="251-如何编写注释">2.5.1 如何编写注释</h3>
<h5 id="一般注释">一般注释</h5>
<pre><code># 这是一个注释
print(&quot;hello world!&quot;)
</code></pre>
<h5 id="单引号多行注释">单引号多行注释</h5>
<pre><code>'''
这是多行注释，用三个单引号
这是多行注释，用三个单引号 
这是多行注释，用三个单引号
'''
print(&quot;Hello, World!&quot;)
</code></pre>
<h5 id="双引号多行注释">双引号多行注释</h5>
<pre><code>&quot;&quot;&quot;
这是多行注释，用三个双引号
这是多行注释，用三个双引号 
这是多行注释，用三个双引号
&quot;&quot;&quot;
print(&quot;Hello, World!&quot;)
</code></pre>
<h5 id="输出函数的注释">输出函数的注释</h5>
<pre><code>def a():
    '''这是文档字符串'''
    pass
print(a.__doc__)
</code></pre>
<h6 id="运行-14">运行：</h6>
<pre><code>这是文档字符串
</code></pre>
<h1 id="第3章-列表简介">第3章 列表简介</h1>
<h2 id="31-列表是什么">3.1 列表是什么</h2>
<h5 id="列表有一些特定顺序排列的元素">列表：有一些特定顺序排列的元素</h5>
<h5 id="用表示列表用隔开其中的元素例">用[]表示列表，用，隔开其中的元素，例：</h5>
<pre><code>bicycles = ['trek', 'cannondale', 'redline', 'specialize']
print(bicycles)
</code></pre>
<h6 id="运行-15">运行：</h6>
<pre><code>['trek', 'cannondale', 'redline', 'specialize']
</code></pre>
<h6 id="打印出来也包含">打印出来也包含[]。</h6>
<h3 id="311-访问列表元素">3.1.1 访问列表元素</h3>
<h5 id="在print语句中指出列表的名称然后指出元素的索引元素在列表中的位置放在内">在print语句中指出列表的名称，然后指出元素的索引(元素在列表中的位置)，放在[]内</h5>
<pre><code>bicycles = ['trek', 'cannondale', 'redline', 'specialize']
print(bicycles[0].title())
</code></pre>
<h6 id="运行-16">运行：</h6>
<pre><code>Trek
</code></pre>
<h3 id="312-索引从0开始而不是1">3.1.2 索引从0开始而不是1</h3>
<pre><code>bicycles = ['trek', 'cannondale', 'redline', 'specialize']
print(bicycles[1])
print(bicycles[3])
</code></pre>
<h6 id="运行-17">运行：</h6>
<pre><code>cannondale
specialize
</code></pre>
<h5 id="打印最后一个元素用-1">打印最后一个元素(用-1)</h5>
<pre><code>bicycles = ['trek', 'cannondale', 'redline', 'specialize']
print(bicycles[-1])
</code></pre>
<h6 id="运行-18">运行：</h6>
<pre><code>specialize
</code></pre>
<h3 id="313-使用列表中的各个值">3.1.3 使用列表中的各个值</h3>
<pre><code>bicycles = ['trek', 'cannondale', 'redline', 'specialize']
message = &quot;My first bicycle was a &quot; + bicycles[0].title() + &quot;.&quot;
print(message)
</code></pre>
<h6 id="运行-19">运行：</h6>
<pre><code>My first bicycle was a Trek.
</code></pre>
<h2 id="32-修改-添加和删除元素">3.2 修改、添加和删除元素</h2>
<h3 id="321-修改列表元素">3.2.1 修改列表元素</h3>
<h5 id="指明元素直接改值">指明元素，直接改值</h5>
<pre><code>motorcycles = ['honda', 'yamaha', 'suzuki']
print(motorcycles)

motorcycles[0] = 'ducati'
print(motorcycles)
</code></pre>
<h6 id="运行-20">运行：</h6>
<pre><code>['honda', 'yamaha', 'suzuki']
['ducati', 'yamaha', 'suzuki']
</code></pre>
<h3 id="322-在列表中添加元素">3.2.2 在列表中添加元素</h3>
<h4 id="1在列表末尾添加元素">1.在列表末尾添加元素</h4>
<h5 id="使用方法append">使用方法.append()</h5>
<pre><code>motorcycles = ['honda', 'yamaha', 'suzuki']
print(motorcycles)

motorcycles.append('ducati')
print(motorcycles)
</code></pre>
<h6 id="运行-21">运行：</h6>
<pre><code>['honda', 'yamaha', 'suzuki']
['honda', 'yamaha', 'suzuki', 'ducati']
</code></pre>
<h5 id="也可以作用于空列表一次只能插入一个">也可以作用于空列表（一次只能插入一个）</h5>
<pre><code>motorcycles = []

motorcycles.append('honda')
motorcycles.append('yamaha')
motorcycles.append('suzuki')

print(motorcycles)
</code></pre>
<h6 id="运行-22">运行：</h6>
<pre><code>['honda', 'yamaha', 'suzuki']
</code></pre>
<h4 id="2在列表中插入元素">2.在列表中插入元素</h4>
<h5 id="使用方法insert">使用方法.insert()</h5>
<h5 id="要指定新元素的索引和值">要指定新元素的索引和值</h5>
<pre><code>motorcycles = ['honda', 'yamaha', 'suzuki']

motorcycles.insert(0,'ducati')
motorcycles.insert(2,'benelli')

print(motorcycles)
</code></pre>
<h6 id="运行-23">运行：</h6>
<pre><code>['ducati', 'honda', 'benelli', 'yamaha', 'suzuki']
</code></pre>
<h3 id="323-从列表中删除元素">3.2.3 从列表中删除元素</h3>
<h4 id="1使用del语句">1.使用del语句</h4>
<pre><code>motorcycles = ['honda', 'yamaha', 'suzuki']
print(motorcycles)

del motorcycles[0]
print(motorcycles)
</code></pre>
<h6 id="运行-24">运行：</h6>
<pre><code>['honda', 'yamaha', 'suzuki']
['yamaha', 'suzuki']
</code></pre>
<h4 id="2使用方法pop">2.使用方法.pop()</h4>
<h5 id="直接删除列表末尾元素">直接删除列表末尾元素</h5>
<pre><code>motorcycles = ['honda', 'yamaha', 'suzuki']
print(motorcycles)

motorcycles.pop()
print(motorcycles)
</code></pre>
<h6 id="运行-25">运行：</h6>
<pre><code>['honda', 'yamaha', 'suzuki']
['honda', 'yamaha']
</code></pre>
<h5 id="也可以删除列表末尾的元素并且接着使用它">也可以删除列表末尾的元素，并且接着使用它</h5>
<pre><code>motorcycles = ['honda', 'yamaha', 'suzuki']
print(motorcycles)

poped_motorcycles = motorcycles.pop()
print(motorcycles)

print(poped_motorcycles)
</code></pre>
<h6 id="运行-26">运行：</h6>
<pre><code>['honda', 'yamaha', 'suzuki']
['honda', 'yamaha']
suzuki
</code></pre>
<h6 id="将suzuki删除了并且将其放在了列表poped_motorcycles中">将'suzuki'，删除了，并且将其放在了列表poped_motorcycles中。</h6>
<h4 id="3弹出列表中任何位置处的元素">3.弹出列表中任何位置处的元素</h4>
<h5 id="使用pop在括号中指定元素的位置">使用.pop()，在括号中指定元素的位置</h5>
<pre><code>motorcycles = ['honda', 'yamaha', 'suzuki']
first_owned = motorcycles.pop(0)
second_owned = motorcycles.pop(1)
print('The first motorcycle I owned was a ' + first_owned.title() + ' and the second was a ' + second_owned.title() + '.')
</code></pre>
<h6 id="运行-27">运行:</h6>
<pre><code>The first motorcycle I owned was a Honda and the second was a Suzuki.
</code></pre>
<h4 id="4根据值删除元素">4.根据值删除元素</h4>
<h5 id="使用remove在括号中指定元素的值">使用.remove()，在括号中指定元素的值</h5>
<pre><code>motorcycles = ['honda', 'yamaha', 'suzuki', 'ducati']
print(motorcycles)

motorcycles.remove('ducati')
print(motorcycles)
</code></pre>
<h6 id="运行-28">运行:</h6>
<pre><code>['honda', 'yamaha', 'suzuki', 'ducati']
['honda', 'yamaha', 'suzuki']
</code></pre>
<h2 id="33-组织列表">3.3 组织列表</h2>
<h3 id="331-方法sort对列表进行永久性排序">3.3.1 方法.sort()对列表进行永久性排序</h3>
<pre><code>cars= ['bmw', 'audi', 'toyota', 'subaru'

cars.sort()
print(cars)
</code></pre>
<h6 id="运行-29">运行:</h6>
<pre><code>['audi', 'bmw', 'subaru', 'toyota']
</code></pre>
<h6 id="列表按照字母顺序排序并且无法恢复到原来的顺序">列表按照字母顺序排序，并且无法恢复到原来的顺序。</h6>
<h5 id="反序">反序：</h5>
<pre><code>cars= ['bmw', 'audi', 'toyota', 'subaru']

cars.sort(reverse = True)
print(cars)
</code></pre>
<h6 id="运行-30">运行:</h6>
<pre><code>['toyota', 'subaru', 'bmw', 'audi']
</code></pre>
<h6 id="列表按照字母反序排序并且无法恢复到原来的顺序">列表按照字母反序排序，并且无法恢复到原来的顺序。</h6>
<h3 id="332-函数sorted对列表进行临时排序">3.3.2 函数sorted()对列表进行临时排序</h3>
<pre><code>cars= ['bmw', 'audi', 'toyota', 'subaru']

print(&quot;Here is the original list: &quot;)
print(cars)

print(&quot;\nHere is the sorted list: &quot;)
print(sorted(cars))

print(&quot;\nHere is the original list again: &quot;)
print(cars)
</code></pre>
<h6 id="运行-31">运行:</h6>
<pre><code>Here is the original list:
['bmw', 'audi', 'toyota', 'subaru']

Here is the sorted list:
['audi', 'bmw', 'subaru', 'toyota']

Here is the original list again:
['bmw', 'audi', 'toyota', 'subaru']
</code></pre>
<h6 id="对列表中元素按照字母顺序进行了排列排列得到的列表名为sortedcars而原列表并未发生变化">对列表中元素按照字母顺序进行了排列，排列得到的列表名为sorted(cars)，而原列表并未发生变化。</h6>
<h3 id="333-方法reverse倒着打印列表永久性修改">3.3.3 方法.reverse()倒着打印列表（永久性修改）</h3>
<pre><code>cars= ['bmw', 'audi', 'toyota', 'subaru']
print(cars)

cars.reverse()
print(cars)
</code></pre>
<h6 id="运行-32">运行：</h6>
<pre><code>['bmw', 'audi', 'toyota', 'subaru']
['subaru', 'toyota', 'audi', 'bmw']
</code></pre>
<h6 id="可以再次使用reverse来使其复原">可以再次使用.reverse()来使其复原。</h6>
<h3 id="334函数len确定列表的长度">3.3.4函数len()确定列表的长度</h3>
<pre><code>cars= ['bmw', 'audi', 'toyota', 'subaru']
len(cars)
print(len(cars))
</code></pre>
<h6 id="运行-33">运行：</h6>
<pre><code>4
</code></pre>
<h2 id="34-使用列表时避免索引错误">3.4 使用列表时避免索引错误</h2>
<h6 id="例">例：</h6>
<pre><code>cars= ['bmw', 'audi', 'toyota', 'subaru']
print(cars[4])
</code></pre>
<h6 id="运行-34">运行：</h6>
<pre><code>Traceback (most recent call last):
File &quot;D:\VSC\PythonApplication1\PythonApplication1.py&quot;, line 2, in &lt;module&gt;
print(cars[4])
IndexError: list index out of range
</code></pre>
<h6 id="错误显示超出了范围">错误显示超出了范围</h6>
<h1 id="第4章-操作列表">第4章 操作列表</h1>
<h2 id="41-遍历整个列表">4.1 遍历整个列表</h2>
<h3 id="411-使用for循环">4.1.1 使用for循环</h3>
<h4 id="在python中缩进代表层级关系">（在Python中，缩进代表层级关系）</h4>
<h5 id="想要打印这个魔术师列表中的所有名字元素对每个元素执行相同的操作可以使用for循环">想要打印这个魔术师列表中的所有名字（元素），对每个元素执行相同的操作，可以使用for循环：</h5>
<pre><code>magicians= ['alice', 'david', 'carolina']
for magician in magicians:
    print(magician)
    
print(magicians)
print(magician)
</code></pre>
<h6 id="运行-35">运行：</h6>
<pre><code>alice
david
carolina
['alice', 'david', 'carolina']
carolina
</code></pre>
<h6 id="for循环先让python从列表magicians中取出第一个元素alice将其存储在变量magician中然后执行循环内语句">for循环先让Python从列表'magicians'中取出第一个元素'alice'，将其存储在变量'magician'中,然后执行循环内语句。</h6>
<h6 id="再进行下一次循环在列表maigcians中取下一个元素将其存储在变量magician中此时变量magician的值已经不再是第一个元素的值了">再进行下一次循环，在列表'maigcians'中取下一个元素，将其存储在变量'magician'中，此时变量'magician'的值已经不再是第一个元素的值了。</h6>
<h3 id="412-在for循环中执行更多的操作">4.1.2 在for循环中执行更多的操作</h3>
<pre><code>magicians= ['alice', 'david', 'carolina']
for magician in magicians:
    print(magician.title() + &quot;,that was a grate trick!&quot;)
</code></pre>
<h6 id="运行-36">运行：</h6>
<pre><code>Alice,that was a grate trick!
David,that was a grate trick!
Carolina,that was a grate trick!
</code></pre>
<h5 id="可以在循环内添加多个语句">可以在循环内添加多个语句：</h5>
<pre><code>magicians= ['alice', 'david', 'carolina']
for magician in magicians:
    print(magician.title() + &quot;,that was a grate trick!&quot;)
    print(&quot;I can't wait to see your next trick, &quot; + magician.title() + &quot;.\n&quot;)
</code></pre>
<h6 id="运行-37">运行：</h6>
<pre><code>Alice,that was a grate trick!
I can't wait to see your next trick, Alice.

David,that was a grate trick!
I can't wait to see your next trick, David.

Carolina,that was a grate trick!
I can't wait to see your next trick, Carolina.
</code></pre>
<h3 id="413-在for循环结束后执行一些操作使用缩进">4.1.3 在for循环结束后执行一些操作（使用缩进）</h3>
<pre><code>magicians= ['alice', 'david', 'carolina']
for magician in magicians:
    print(magician.title() + &quot;,that was a grate trick!&quot;)
    print(&quot;I can't wait to see your next trick, &quot; + magician.title() + &quot;.\n&quot;)
    
print(&quot;Thank you, every one. That was a great magic show!&quot;)
</code></pre>
<h6 id="运行-38">运行：</h6>
<pre><code>Alice,that was a grate trick!
I can't wait to see your next trick, Alice.

David,that was a grate trick!
I can't wait to see your next trick, David.

Carolina,that was a grate trick!
I can't wait to see your next trick, Carolina.

Thank you, every one. That was a great magic show!
</code></pre>
<h1 id="避免缩进错误">避免缩进错误</h1>
<h3 id="421-忘记缩进">4.2.1 忘记缩进</h3>
<pre><code>magicians= ['alice', 'david', 'carolina']
for magician in magicians:
print(magician)
</code></pre>
<h6 id="运行-39">运行：</h6>
<pre><code>File &quot;D:\VSC\PythonApplication1\PythonApplication1.py&quot;, line 3
    print(magician)
        ^
IndentationError: expected an indented block
</code></pre>
<h6 id="提示-缩进错误">提示 缩进错误</h6>
<h3 id="422-忘记缩进额外的代码行">4.2.2 忘记缩进额外的代码行</h3>
<pre><code>magicians= ['alice', 'david', 'carolina']
for magician in magicians:
    print(magician.title() + &quot;,that was a grate trick!&quot;)
print(&quot;I can't wait to see your next trick, &quot; + magician.title() + &quot;.\n&quot;)
</code></pre>
<h6 id="运行-40">运行：</h6>
<pre><code>Alice,that was a grate trick!
David,that was a grate trick!
Carolina,that was a grate trick!
I can't wait to see your next trick, Carolina.
</code></pre>
<h6 id="我们想要最后一句可以出现三次可是只出现了一次并且用到for循环中的变量magician的值为for循环内最后一次赋给该变量的值">我们想要最后一句可以出现三次，可是只出现了一次，并且用到for循环中的变量'magician'的值为for循环内最后一次赋给该变量的值。</h6>
<h3 id="423-不必要的缩进">4.2.3 不必要的缩进</h3>
<pre><code>message = &quot;Hello Python world!&quot;
    print(message)
</code></pre>
<h6 id="运行-41">运行：</h6>
<pre><code>  File &quot;D:\VSC\PythonApplication1\PythonApplication1.py&quot;, line 2
    print(message)
    ^
IndentationError: unexpected indent
</code></pre>
<h6 id="提示-缩进错误-2">提示 缩进错误</h6>
<h3 id="424-循环后不必要的缩进">4.2.4 循环后不必要的缩进</h3>
<h5 id="与422错误相反把不想循环的语句添加了缩进导致该语句被放入for循环中">与4.2.2错误相反，把不想循环的语句添加了缩进，导致该语句被放入for循环中。</h5>
<h3 id="425-遗漏了冒号">4.2.5 遗漏了冒号</h3>
<pre><code>magicians= ['alice', 'david', 'carolina']
for magician in magicians
    print(magician)
</code></pre>
<h6 id="运行-42">运行：</h6>
<pre><code>  File &quot;D:\VSC\PythonApplication1\PythonApplication1.py&quot;, line 2
    for magician in magicians
                            ^
SyntaxError: invalid syntax
</code></pre>
<h6 id="提示-语法错误">提示 语法错误</h6>
<h2 id="43-创建数值列表">4.3 创建数值列表</h2>
<h3 id="431-函数range">4.3.1 函数range()</h3>
<pre><code>for value in range(0,5):
    print(value)
</code></pre>
<h6 id="运行-43">运行：</h6>
<pre><code>0
1
2
3
4
</code></pre>
<h6 id="函数range可以生成一系列的数字上述从0开始到4结束并不会打印5-range中范围左闭右开">函数range()可以生成一系列的数字，上述从0开始到4结束，并不会打印5。（range()中范围左闭右开）。</h6>
<h3 id="432-使用range创建数字列表">4.3.2 使用range()创建数字列表</h3>
<h5 id="使用函数list">使用函数list()：</h5>
<pre><code>numbers = list(range(1,6))
print(numbers)
</code></pre>
<h6 id="运行-44">运行：</h6>
<pre><code>[1, 2, 3, 4, 5]
</code></pre>
<h6 id="生成了数字列表numbers-12345">生成了数字列表numbers = [1,2,3,4,5]。</h6>
<h5 id="打印1到10内的偶数">打印1到10内的偶数：</h5>
<pre><code>numbers = list(range(2,12,2))
print(numbers)
</code></pre>
<h6 id="运行-45">运行：</h6>
<pre><code>[2, 4, 6, 8, 10]
</code></pre>
<h6 id="函数range从2开始数然后增2直到达到或超过终值12结束">函数range()从2开始数，然后增2，直到达到或超过终值12结束。</h6>
<h5 id="下面一个例子">下面一个例子：</h5>
<pre><code>squares = []
for value in range(1,11):
    square = value**2
    squares.append(square)
    
print(squares)
</code></pre>
<h6 id="运行-46">运行：</h6>
<pre><code>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
</code></pre>
<h6 id="创建了一个空列表squares然后使用range函数遍历1到10的值然后在循环内计算当前值的平方将平方值存储到变量square中再将新计算得到的平方值赋加到列表squares的末尾循环结束后打印列表squares">创建了一个空列表squares[]，然后使用range()函数，遍历1到10的值，然后在循环内计算当前值的平方，将平方值存储到变量square中，再将新计算得到的平方值赋加到列表squares[]的末尾，循环结束后打印列表squares[]。</h6>
<h5 id="也可以不使用临时变量square而是直接将每个计算得到的值赋加到列表末尾">也可以不使用临时变量square，而是直接将每个计算得到的值赋加到列表末尾：</h5>
<pre><code>squares = []
for value in range(1,11):
    squares.append(value**2)

print(squares)
</code></pre>
<h6 id="运行-47">运行：</h6>
<pre><code>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
</code></pre>
<h6 id="执行后得到的结果也是一样的">执行后得到的结果也是一样的。</h6>
<h3 id="433-对数字列表执行简单的统计计算">4.3.3 对数字列表执行简单的统计计算</h3>
<h5 id="min-max-sum">min()、max()、sum()</h5>
<pre><code>digits = [1,2,3,4,5,6,7,8,9,0]
min(digits)
max(digits)
sum(digits)
print(min(digits))
print(max(digits))
print(sum(digits))
</code></pre>
<h6 id="运行-48">运行：</h6>
<pre><code>0
9
45
</code></pre>
<h3 id="434-列表解析">4.3.4 列表解析</h3>
<pre><code>squares = [value**2 for value in range(1,11)]
print(squares)
</code></pre>
<h6 id="运行-49">运行：</h6>
<pre><code>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
</code></pre>
<h6 id="将for循环和创造新元素写在一行并且能自动附加新元素">将for循环和创造新元素写在一行，并且能自动附加新元素。</h6>
<h2 id="44-使用列表的一部分">4.4 使用列表的一部分</h2>
<h3 id="441-切片处理列表的部分元素">4.4.1 切片（处理列表的部分元素）</h3>
<h5 id="打印列表players的前三个元素的值再打印第2个到第4个元素的值">打印列表players[]的前三个元素的值，再打印第2个到第4个元素的值：</h5>
<pre><code>players = ['charles', 'martina', 'michael', 'florence', 'eli']
print(players[0:3])
print(players[1:4])
</code></pre>
<h6 id="运行-50">运行：</h6>
<pre><code>['charles', 'martina', 'michael']
['martina', 'michael', 'florence']
</code></pre>
<h6 id="在输出语句写入列表名在列表名后的中填入第1个到第3个元素的索引位置用-连接-范围左闭右开">在输出语句写入列表名，在列表名后的[]中填入第1个到第3个元素的索引（位置），用 : 连接。（范围左闭右开）</h6>
<h5 id="如果不指定第一个索引或最后一个索引">如果不指定第一个索引或最后一个索引：</h5>
<pre><code>players = ['charles', 'martina', 'michael', 'florence', 'eli']
print(players[:4])
print(players[1:])
</code></pre>
<h6 id="运行-51">运行：</h6>
<pre><code>['charles', 'martina', 'michael', 'florence']
['martina', 'michael', 'florence', 'eli']
</code></pre>
<h5 id="输出列表中倒数第3个到倒数第2个元素的值区间左闭右开">输出列表中倒数第3个到倒数第2个元素的值：（区间左闭右开）</h5>
<h5 id="输出列表开始到倒数第2个元素的值">输出列表开始到倒数第2个元素的值：</h5>
<h5 id="输出列表最后3个元素的值">输出列表最后3个元素的值：</h5>
<pre><code>players = ['charles', 'martina', 'michael', 'florence', 'eli']
print(players[-3:-1])
print(players[:-1])
print(players[-3:])
</code></pre>
<h6 id="运行-52">运行：</h6>
<pre><code>['michael', 'florence']
['charles', 'martina', 'michael', 'florence']
['michael', 'florence', 'eli']
</code></pre>
<h3 id="442-遍历切片">4.4.2 遍历切片</h3>
<h5 id="遍历显示列表中前三个元素">遍历显示列表中前三个元素：</h5>
<pre><code>players = ['charles', 'martina', 'michael', 'florence', 'eli']
print(&quot;Here are the first three palyers on my team:&quot;)
for player in players[:3]:
    print(player.title())
</code></pre>
<h6 id="运行-53">运行：</h6>
<pre><code>Here are the first three palyers on my team:
Charles
Martina
Michael
</code></pre>
<h3 id="443-复制列表">4.4.3 复制列表</h3>
<h5 id="同时省略-起始索引和终止索引">同时省略 起始索引和终止索引</h5>
<pre><code>my_foods = ['pizza', 'falafel', 'carrot cake']
friend_foods = my_foods[:]

print(&quot;My favorite foods are: &quot;)
print(my_foods)

print(&quot;\nMy friend's favorite foods are: &quot;)
print(friend_foods)
</code></pre>
<h6 id="运行-54">运行：</h6>
<pre><code>My favorite foods are:
['pizza', 'falafel', 'carrot cake']

My friend's favorite foods are:
['pizza', 'falafel', 'carrot cake']
</code></pre>
<h6 id="注如果想要复制部分元素只需要填入对应的索引区间即可">注：如果想要复制部分元素，只需要填入对应的索引区间即可。</h6>
<h5 id="再分别给两个列表赋加新的元素可以证明我们真的复制了列表两个列表是不同的">再分别给两个列表赋加新的元素（可以证明我们真的复制了列表，两个列表是不同的）：</h5>
<pre><code>my_foods = ['pizza', 'falafel', 'carrot cake']
friend_foods = my_foods[:]

my_foods.append('cannoli')
friend_foods.append('ice cream')

print(&quot;My favorite foods are: &quot;)
print(my_foods)

print(&quot;\nMy friend's favorite foods are: &quot;)
print(friend_foods)
</code></pre>
<h6 id="运行-55">运行：</h6>
<pre><code>My favorite foods are:
['pizza', 'falafel', 'carrot cake', 'cannoli']

My friend's favorite foods are:
['pizza', 'falafel', 'carrot cake', 'ice cream']
</code></pre>
<h5 id="不使用切片直接把my_foods赋值给friend_foods">不使用切片，直接把my_foods赋值给friend_foods：</h5>
<pre><code>my_foods = ['pizza', 'falafel', 'carrot cake']
friend_foods = my_foods[:]

friend_foods = my_foods

my_foods.append('cannoli')
friend_foods.append('ice cream')

print(&quot;My favorite foods are: &quot;)
print(my_foods)

print(&quot;\nMy friend's favorite foods are: &quot;)
print(friend_foods)
</code></pre>
<h6 id="运行-56">运行：</h6>
<pre><code>My favorite foods are:
['pizza', 'falafel', 'carrot cake', 'cannoli', 'ice cream']

My friend's favorite foods are:
['pizza', 'falafel', 'carrot cake', 'cannoli', 'ice cream']
</code></pre>
<h6 id="两个列表变成了相同的">两个列表变成了相同的</h6>
<h6 id="原因进行了地址传递两个列表指向了同一个对象地址相同">原因：=进行了地址传递，两个列表指向了同一个对象，地址相同。</h6>
<h2 id="45-元组">4.5 元组</h2>
<h3 id="451-定义元组">4.5.1 定义元组</h3>
<h5 id="元组不可变的列表">元组：不可变的列表</h5>
<h5 id="元组用访问时用">元组用()，访问时用[]</h5>
<pre><code>dimensions = (200,50)
print(dimensions[0])
print(dimensions[1])
</code></pre>
<h6 id="运行-57">运行：</h6>
<pre><code>200
50
</code></pre>
<h5 id="尝试修改元组中的元素">尝试修改元组中的元素</h5>
<pre><code>dimensions = (200,50)
dimensions[0] = 250
</code></pre>
<h6 id="运行-58">运行：</h6>
<pre><code>Traceback (most recent call last):
  File &quot;D:\VSC\PythonApplication1\PythonApplication1.py&quot;, line 2, in &lt;module&gt;
    dimensions[0] = 250
TypeError: 'tuple' object does not support item assignment
</code></pre>
<h6 id="提示类型错误试图修改第一个元素的值导致python返回类型错误消息-由于试图修改元组的操作是被禁止的因此python指出不能给元组的元素赋值">提示：类型错误，试图修改第一个元素的值，导致Python返回类型错误消息。由于试图修改元组的操作是被禁止的，因此Python指出不能给元组的元素赋值</h6>
<h3 id="452-遍历元组中的所有值">4.5.2 遍历元组中的所有值</h3>
<h5 id="同列表一样可以使用for循环来遍历元组中的所有值">同列表一样，可以使用for循环来遍历元组中的所有值：</h5>
<pre><code>dimensions = (200,50)
for dimension in dimensions:
    print(dimension)
</code></pre>
<h6 id="运行-59">运行：</h6>
<pre><code>200
50
</code></pre>
<h3 id="453-修改元组变量">4.5.3 修改元组变量</h3>
<h5 id="虽然不可以修改元组中的元素但可以给储存元组的变量赋值">虽然不可以修改元组中的元素，但可以给储存元组的变量赋值：</h5>
<pre><code>dimensions = (200,50)
print(&quot;Original dimensions: &quot;)
for dimension in dimensions:
    print(dimension)

dimensions = (400,100)
print(&quot;\nModified dimensions: &quot;)
for dimension in dimensions:
    print(dimension)
</code></pre>
<h6 id="运行-60">运行：</h6>
<pre><code>Original dimensions:
200
50

Modified dimensions:
400
100
</code></pre>
<h6 id="即为该元组重新赋值">即为该元组重新赋值。</h6>
<h1 id="第5章-if语句">第5章 if语句</h1>
<h2 id="51-一个简单示例">5.1 一个简单示例</h2>
<h5 id="下面是一个简短的示例演示了如何使用if语句来正确地处理特殊情形-假设你有一个汽车列表并想将其中每辆汽车的名称打印出来-对于大多数汽车都应以首字母大写的方式打印其名称但对于汽车名bmw应以全大写的方式打印-下面的代码遍历一个列表并以首字母大写的方式打印其中的汽车名但对于汽车名bmw以全大写的方式打印">下面是一个简短的示例，演示了如何使用if语句来正确地处理特殊情形。假设你有一个汽车列表，并想将其中每辆汽车的名称打印出来。对于大多数汽车，都应以首字母大写的方式打印其名称，但对于汽车名'bmw'，应以全大写的方式打印。下面的代码遍历一个列表，并以首字母大写的方式打印其中的汽车名，但对于汽车名'bmw'，以全大写的方式打印：</h5>
<pre><code>cars = ['audi', 'bmw', 'subaru', 'toyota']
for car in cars:
    if car == 'bmw':
        print(car.upper())
    else:
        print(car.title())
</code></pre>
<h6 id="运行-61">运行：</h6>
<pre><code>Audi
BMW
Subaru
Toyota
</code></pre>
<h6 id="注时赋值的意思是等于的意思">注：“=”时赋值的意思，“==”是等于的意思。</h6>
<h6 id="这个示例中的循环首先检查当前的汽车名是否是bmw-如果是就以全大写的方式打印它否则就以首字母大写的方式打印">这个示例中的循环首先检查当前的汽车名是否是'bmw'。如果是，就以全大写的方式打印它；否则就以首字母大写的方式打印：</h6>
<h2 id="52-条件测试">5.2 条件测试</h2>
<h5 id="每条if语句的核心都是一个值为true或false的表达式这种表达式被称为条件测试-python根据条件测试的值为true还是false来决定是否执行if语句中的代码-如果条件测试的值为truepython就执行紧跟在if语句后面的代码如果为falsepython就忽略这些代码">每条if语句的核心都是一个值为True或False的表达式，这种表达式被称为条件测试。Python根据条件测试的值为True还是False来决定是否执行if语句中的代码。如果条件测试的值为True，Python就执行紧跟在if语句后面的代码；如果为False，Python就忽略这些代码。</h5>
<h3 id="521-检查是否相等">5.2.1 检查是否相等</h3>
<h5 id="大多数条件测试都将一个变量的当前值同特定值进行比较-最简单的条件测试检查变量的值是否与特定值相等">大多数条件测试都将一个变量的当前值同特定值进行比较。最简单的条件测试检查变量的值是否与特定值相等：</h5>
<pre><code>car = 'bmw'
car == 'bmw'
</code></pre>
<p>返回值：True</p>
<h6 id="使用来判断car的值是否等于bmw如果是返回true反之返回false">使用“==”来判断car的值是否等于‘bmw’，如果是，返回True，反之返回False</h6>
<pre><code>car = 'audi'
car == 'bmw'
</code></pre>
<p>返回值：False</p>
<h6 id="在编译器里可以这样显示返回值">在编译器里可以这样显示返回值：</h6>
<pre><code>car = 'audi'
print(car == 'bmw')
</code></pre>
<h6 id="运行-62">运行：</h6>
<pre><code>False
</code></pre>
<h3 id="522-检查是否相等时不考虑大小写">5.2.2 检查是否相等时不考虑大小写</h3>
<pre><code>car = 'Audi'
print(car == 'audi')
</code></pre>
<h6 id="运行-63">运行：</h6>
<pre><code>False
</code></pre>
<h6 id="两个大小写不同的值会被认为不相等">两个大小写不同的值会被认为不相等。</h6>
<pre><code>car = 'Audi'
print(car.lower() == 'audi')
print(car)
</code></pre>
<h6 id="运行-64">运行：</h6>
<pre><code>True
Audi
</code></pre>
<h6 id="可以看出使用方法lower使car的值变为小写再进行比较得到true而car本身的值并无变化">可以看出，使用方法.lower()使car的值变为小写，再进行比较，得到True，而car本身的值并无变化。</h6>
<h3 id="523-检查是否不相等">5.2.3 检查是否不相等</h3>
<h5 id="要判断两个值是否不等可结合使用惊叹号和等号其中的惊叹号表示不在很多编程语言中都如此">要判断两个值是否不等，可结合使用惊叹号和等号（!=），其中的惊叹号表示不，在很多编程语言中都如此。</h5>
<h5 id="下面再使用一条if语句来演示如何使用不等运算符-我们将把要求的比萨配料存储在一个变量中再打印一条消息指出顾客要求的配料是否是意式小银鱼anchovies">下面再使用一条if语句来演示如何使用不等运算符。我们将把要求的比萨配料存储在一个变量中，再打印一条消息，指出顾客要求的配料是否是意式小银鱼（anchovies）：</h5>
<pre><code>requested_topping = 'mushrooms'
if requested_topping != 'anchovies':
    print(&quot;Hlod the anchovies!&quot;)
</code></pre>
<h6 id="运行-65">运行：</h6>
<pre><code>Hlod the anchovies!
</code></pre>
<h6 id="使用了如果值不相等返回true执行if内语句如果相等则返回false不执行if内语句">使用了“!=”，如果值不相等，返回True，执行if内语句；如果相等则返回False，不执行if内语句。</h6>
<h3 id="524-比较数字">5.2.4 比较数字</h3>
<h5 id="检查数值非常简单例如下面的代码检查一个人是否是18岁">检查数值非常简单，例如，下面的代码检查一个人是否是18岁：</h5>
<pre><code>age = 18
print(age == 18)
</code></pre>
<h6 id="运行-66">运行：</h6>
<pre><code>True
</code></pre>
<h5 id="你还可以检查两个数字是否不等例如下面的代码在提供的答案不正确时打印一条消息">你还可以检查两个数字是否不等，例如，下面的代码在提供的答案不正确时打印一条消息：</h5>
<pre><code>answer = 17
if answer != 42:
    print(&quot;That is not the correct answer.Please try again!&quot;)
</code></pre>
<h6 id="运行-67">运行：</h6>
<pre><code>That is not the correct answer.Please try again!
</code></pre>
<h3 id="525-检查多个条件">5.2.5 检查多个条件</h3>
<h5 id="你可能想同时检查多个条件例如有时候你需要在两个条件都为true时才执行相应的操作而有时候你只要求一个条件为true时就执行相应的操作-在这些情况下关键字and和or可助你一臂之力">你可能想同时检查多个条件，例如，有时候你需要在两个条件都为True时才执行相应的操作，而有时候你只要求一个条件为True时就执行相应的操作。在这些情况下，关键字and和or可助你一臂之力。</h5>
<h4 id="1使用and检查多个条件">1.使用and检查多个条件</h4>
<h5 id="要检查是否两个条件都为true可使用关键字and将两个条件测试合而为一如果每个测试都通过了整个表达式就为true如果至少有一个测试没有通过整个表达式就为false">要检查是否两个条件都为True，可使用关键字and将两个条件测试合而为一；如果每个测试都通过了，整个表达式就为True；如果至少有一个测试没有通过，整个表达式就为False。</h5>
<h5 id="例如要检查是否两个人都不小于21岁可使用下面的测试">例如，要检查是否两个人都不小于21岁，可使用下面的测试：</h5>
<pre><code>#检查是否两个人都不小于21岁

age_0 = 22
age_1 = 18

print((age_0 &gt;= 21) and (age_1 &gt;= 21))
</code></pre>
<h6 id="运行-68">运行：</h6>
<pre><code>False
</code></pre>
<h4 id="2使用or检查多个条件">2.使用or检查多个条件</h4>
<h5 id="关键字or也能够让你检查多个条件但只要至少有一个条件满足就能通过整个测试-仅当两个测试都没有通过时使用or的表达式才为false">关键字or也能够让你检查多个条件，但只要至少有一个条件满足，就能通过整个测试。仅当两个测试都没有通过时，使用or的表达式才为False。</h5>
<h5 id="下面再次检查两个人的年龄但检查的条件是至少有一个人的年龄不小于21岁">下面再次检查两个人的年龄，但检查的条件是至少有一个人的年龄不小于21岁：</h5>
<pre><code>age_0 = 22
age_1 = 18

print((age_0 &gt;= 21) or (age_1 &gt;= 21))
</code></pre>
<h6 id="运行-69">运行：</h6>
<pre><code>True
</code></pre>
<h6 id="由于对age_0的测试通过了因此整个表达式的结果为true">由于对age_0的测试通过了，因此整个表达式的结果为True。</h6>
<h3 id="526-检查特定值是否包含在列表中">5.2.6 检查特定值是否包含在列表中</h3>
<h5 id="要判断特定的值是否已包含在列表中可使用关键字in">要判断特定的值是否已包含在列表中，可使用关键字in。</h5>
<h5 id="来看你可能为比萨店编写的一些代码这些代码首先创建一个列表其中包含用户点的比萨配料然后检查特定的配料是否包含在该列表中">来看你可能为比萨店编写的一些代码；这些代码首先创建一个列表，其中包含用户点的比萨配料，然后检查特定的配料是否包含在该列表中。</h5>
<pre><code>requested_toppings = ['mushrooms', 'onions', 'pineapple']

print('mushrooms' in requested_toppings)
</code></pre>
<h6 id="运行-70">运行：</h6>
<pre><code>True
</code></pre>
<h3 id="527-检查特定值是否不包含在列表中">5.2.7 检查特定值是否不包含在列表中</h3>
<h5 id="还有些时候确定特定的值未包含在列表中很重要在这种情况下可使用关键字not-in">还有些时候，确定特定的值未包含在列表中很重要；在这种情况下，可使用关键字not in。</h5>
<h5 id="例如如果有一个列表其中包含被禁止在论坛上发表评论的用户就可在允许用户提交评论前检查他是否被禁言">例如，如果有一个列表，其中包含被禁止在论坛上发表评论的用户，就可在允许用户提交评论前检查他是否被禁言：</h5>
<pre><code>banner_users = ['andrew', 'carolina', 'david']
user = 'martie'
if user not in banner_users:
    print(user.title() + &quot;you can post a response if you wish&quot;)
</code></pre>
<h6 id="运行-71">运行：</h6>
<pre><code>Martieyou can post a response if you wish
</code></pre>
<h6 id="如果user的值没有包含在列表banner_users中那么python会返回true进而执行缩进的代码行">如果user的值没有包含在列表banner_users中，那么Python会返回True，进而执行缩进的代码行。</h6>
<h3 id="528-布尔表达式">5.2.8 布尔表达式</h3>
<h5 id="布尔表达式它不过是条件测试的别名-与条件表达式一样布尔表达式的结果要么为true要么为false">布尔表达式，它不过是条件测试的别名。与条件表达式一样，布尔表达式的结果要么为True，要么为False。</h5>
<h5 id="布尔值通常用于记录条件如游戏是否正在运行或用户是否可以编辑网站的特定内容">布尔值通常用于记录条件，如游戏是否正在运行，或用户是否可以编辑网站的特定内容</h5>
<h2 id="53-if语句">5.3 if语句</h2>
<h5 id="理解条件测试后就可以开始编写if语句了-if语句有很多种选择使用哪种取决于要测试的条件数-前面讨论条件测试时列举了多个if语句示例下面更深入地讨论这个主题">理解条件测试后，就可以开始编写if语句了。if语句有很多种，选择使用哪种取决于要测试的条件数。前面讨论条件测试时，列举了多个if语句示例，下面更深入地讨论这个主题。</h5>
<h3 id="531-简单的if语句">5.3.1 简单的if语句</h3>
<h5 id="最简单的if语句只有一个测试和一个操作">最简单的if语句只有一个测试和一个操作：</h5>
<pre><code>if conditional_test:
    do something
</code></pre>
<h6 id="在第1行中可包含任何条件测试而在紧跟在测试后面的缩进代码块中可执行任何操作">在第1行中，可包含任何条件测试，而在紧跟在测试后面的缩进代码块中，可执行任何操作。</h6>
<h6 id="如果条件测试的结果为truepython就会执行紧跟在if语句后面的代码否则python将忽略这些代码">如果条件测试的结果为True，Python就会执行紧跟在if语句后面的代码；否则Python将忽略这些代码。</h6>
<h5 id="假设有一个表示某人年龄的变量而你想知道这个人是否够投票的年龄可使用如下代码">假设有一个表示某人年龄的变量，而你想知道这个人是否够投票的年龄，可使用如下代码：</h5>
<pre><code>age = 19
if age &gt;= 18:
    print(&quot;You are old enough to vote!&quot;)
</code></pre>
<h6 id="运行-72">运行：</h6>
<pre><code>You are old enough to vote!
</code></pre>
<h3 id="532-if-else语句">5.3.2 if-else语句</h3>
<h5 id="if-else语句块类似于简单的if语句但其中的else语句让你能够指定条件测试未通过时要执行的操作">if-else语句块类似于简单的if语句，但其中的else语句让你能够指定条件测试未通过时要执行的操作。</h5>
<h5 id="下面的代码在一个人够投票的年龄时显示与前面相同的消息同时在这个人不够投票的年龄时也显示一条消息">下面的代码在一个人够投票的年龄时显示与前面相同的消息，同时在这个人不够投票的年龄时也显示一条消息：</h5>
<pre><code>age = 17
if age &gt;= 18:
    print(&quot;You are old enough to vote!&quot;)
    print(&quot;Haveyou registered to vote yet?&quot;)
else:
    print(&quot;Sorry, you are too young to vote.&quot;)
    print(&quot;Please register to vote as soon as you turn 18!&quot;)
</code></pre>
<h6 id="运行-73">运行：</h6>
<pre><code>Sorry, you are too young to vote.
Please register to vote as soon as you turn 18!
</code></pre>
<h6 id="如果条件测试通过了就执行第一个缩进的print语句块如果测试结果为false就">如果条件测试通过了，就执行第一个缩进的print语句块；如果测试结果为False，就</h6>
<h6 id="执行else内的代码块-这次age小于18条件测试未通过因此执行else代码块中的代码">执行else内的代码块。这次age小于18，条件测试未通过，因此执行else代码块中的代码。</h6>
<h5 id="上述代码之所以可行是因为只存在两种情形要么够投票的年龄要么不够">上述代码之所以可行，是因为只存在两种情形：要么够投票的年龄，要么不够。</h5>
<h5 id="if-else结构非常适合用于要让python执行两种操作之一的情形-在这种简单的if-else结构中总是会执行两个操作中的一个">if-else结构非常适合用于要让Python执行两种操作之一的情形。在这种简单的if-else结构中，总是会执行两个操作中的一个。</h5>
<h3 id="533-if-elif-else语句">5.3.3 if-elif-else语句</h3>
<h5 id="使用if-elif-else结构来完成对多种情形的判断它依次检查每个条件测试直到遇到通过了的测试">使用if-elif-else结构来完成对多种情形的判断，它依次检查每个条件测试，直到遇到通过了的测试。</h5>
<h5 id="测试通过后python将执行紧跟其后缩进的代码并跳过余下的测试">测试通过后，Python将执行紧跟其后缩进的代码，并跳过余下的测试。</h5>
<h6 id="来看一个根据年龄段收费的游乐场">来看一个根据年龄段收费的游乐场：</h6>
<pre><code> 4岁以下免费；
 4~18岁收费5美元；
 18岁（含）以上收费10美元。
</code></pre>
<h6 id="如果只使用一条if语句如何确定门票价格呢">如果只使用一条if语句，如何确定门票价格呢？</h6>
<h6 id="下面的代码确定一个人所属的年龄段并打印一条包含门票价格的消息">下面的代码确定一个人所属的年龄段，并打印一条包含门票价格的消息：</h6>
<pre><code>age = 12
if age &lt; 4:
    price = 0
elif age &lt; 18:
    price = 5
else:
    price = 10
print(&quot;Your admission cost is $&quot;+ str(price) + &quot;.&quot;)
</code></pre>
<h6 id="运行-74">运行：</h6>
<pre><code>Your adimssion cost is $5.
</code></pre>
<h6 id="函数str改变变量price类型为字符串">函数str()改变变量price类型为字符串。</h6>
<h3 id="534-使用多个elif代码块">5.3.4 使用多个elif代码块</h3>
<h5 id="可根据需要使用任意数量的elif代码块">可根据需要使用任意数量的elif代码块。</h5>
<h6 id="例如假设前述游乐场要给老年人打折可再添加一个条件测试判断顾客是否符合打折条件-下面假设对于65岁含以上的老人可以半价即5美元购买门票">例如，假设前述游乐场要给老年人打折，可再添加一个条件测试，判断顾客是否符合打折条件。下面假设对于65岁（含）以上的老人，可以半价（即5美元）购买门票：</h6>
<pre><code>age = 12
if age &lt; 4:
    price = 0
elif age &lt; 18:
    price = 5
elif age &lt; 65:
    price = 10
else:
    price = 5

print(&quot;Your amission cost is $&quot; + str(price) + &quot;.&quot;)
</code></pre>
<h6 id="运行-75">运行:</h6>
<pre><code>Your adimssion cost is $5.
</code></pre>
<h6 id="通过使用多个elif代码块可使我们进行很多很多次判断">通过使用多个elif代码块，可使我们进行很多很多次判断。</h6>
<h3 id="535-省略else代码块">5.3.5 省略else代码块</h3>
<h5 id="python并不要求if-elif结构后面必须有else代码块">Python并不要求if-elif结构后面必须有else代码块。</h5>
<h5 id="在有些情况下else代码块很有用而在其他一些情况下使用一条elif语句来处理特定的情形更清晰">在有些情况下，else代码块很有用；而在其他一些情况下，使用一条elif语句来处理特定的情形更清晰：</h5>
<pre><code>age = 66
if age &lt; 4:
    price = 0
elif age &lt; 18:
    price = 5
elif age &lt; 65:
    price = 10
elif age &gt;=65:
    price = 5

print(&quot;Your amission cost is $&quot; + str(price) + &quot;.&quot;)
</code></pre>
<h6 id="运行-76">运行：</h6>
<pre><code>Your adimssion cost is $10.
</code></pre>
<h6 id="最后一条elif代码块在顾客的年龄超过65含时将价格设置为5美元这比使用else代码块更清晰些-经过这样的修改后每个代码块都仅在通过了相应的测试时才会执行">最后一条elif代码块在顾客的年龄超过65（含）时，将价格设置为5美元，这比使用else代码块更清晰些。经过这样的修改后，每个代码块都仅在通过了相应的测试时才会执行。</h6>
<h6 id="else是一条包罗万象的语句只要不满足任何if或elif中的条件测试其中的代码就会执行这可能会引入无效甚至恶意的数据">else是一条包罗万象的语句，只要不满足任何if或elif中的条件测试，其中的代码就会执行，这可能会引入无效甚至恶意的数据。</h6>
<h6 id="如果知道最终要测试的条件应考虑使用一个elif代码块来代替else代码块-这样你就可以肯定仅当满足相应的条件时你的代码才会执行">如果知道最终要测试的条件，应考虑使用一个elif代码块来代替else代码块。这样，你就可以肯定，仅当满足相应的条件时，你的代码才会执行。</h6>
<h3 id="536-测试多个条件">5.3.6 测试多个条件</h3>
<h5 id="有时候必须检查你关心的所有条件-在这种情况下应使用一系列不包含elif和else代码块的简单if语句">有时候必须检查你关心的所有条件。在这种情况下，应使用一系列不包含elif和else代码块的简单if语句。</h5>
<h5 id="在可能有多个条件为true且你需要在每个条件为true时都采取相应措施时适合使用这种方法">在可能有多个条件为True，且你需要在每个条件为True时都采取相应措施时，适合使用这种方法。</h5>
<h6 id="下面再来看前面的比萨店示例-如果顾客点了两种配料就需要确保在其比萨中包含这些配料">下面再来看前面的比萨店示例。如果顾客点了两种配料，就需要确保在其比萨中包含这些配料：</h6>
<pre><code>request_toppings = ['mushrooms', 'extra cheese']

if 'mushrooms' in request_toppings:
    print(&quot;Adding mushrooms.&quot;)
if 'pepperoni' in request_toppings:
    print(&quot;Adding pepperoni.&quot;)
if 'extra cheese' in request_toppings:
    print(&quot;Adding extra cheese.&quot;)

print(&quot;\nFinished ,aking your pizza!&quot;)
</code></pre>
<h6 id="运行-77">运行：</h6>
<pre><code>Adding mushrooms.
Adding extra cheese.

Finished ,aking your pizza!
</code></pre>
<h6 id="我们首先创建了一个列表其中包含顾客点的配料-每一条if语句检查顾客是否点了该配料而下一条条件判断语句代码也是一个简单的if语句而不是elif或else语句因此不管前一个测试是否通过都将进行这个测试-每当这个程序运行时都会进行这三个独立的测试">我们首先创建了一个列表，其中包含顾客点的配料。每一条if语句检查顾客是否点了该配料，而下一条条件判断语句代码也是一个简单的if语句，而不是elif或else语句；因此不管前一个测试是否通过，都将进行这个测试。每当这个程序运行时，都会进行这三个独立的测试。</h6>
<h2 id="54-使用if语句处理列表">5.4 使用if语句处理列表</h2>
<h5 id="通过结合使用if语句和列表可完成一些有趣的任务对列表中特定的值做特殊处理高效地管理不断变化的情形如餐馆是否还有特定的食材证明代码在各种情形下都将按预期那样运行">通过结合使用if语句和列表，可完成一些有趣的任务：对列表中特定的值做特殊处理；高效地管理不断变化的情形，如餐馆是否还有特定的食材；证明代码在各种情形下都将按预期那样运行。</h5>
<h3 id="541-检查特殊元素">5.4.1 检查特殊元素</h3>
<h6 id="这家比萨店在制作比萨时每添加一种配料都打印一条消息">这家比萨店在制作比萨时，每添加一种配料都打印一条消息。</h6>
<h6 id="通过创建一个列表在其中包含顾客点的配料并使用一个循环来指出添加到比萨中的配料可以以极高的效率编写这样的代码">通过创建一个列表，在其中包含顾客点的配料，并使用一个循环来指出添加到比萨中的配料，可以以极高的效率编写这样的代码：</h6>
<pre><code>request_toppings = ['mushrooms', 'green peppers', 'extra cheese']

for requested_topping in request_toppings:
    print(&quot;Adding &quot; + requested_topping + &quot;.&quot;)
print(&quot;\nFinished making your pizza!&quot;)
</code></pre>
<h6 id="运行-78">运行：</h6>
<pre><code>Adding mushrooms.
Adding green peppers.
Adding extra cheese.

Finished making your pizza!
</code></pre>
<h6 id="使用for循环和列表将要求的每一个配料都打印出一条语句">使用for循环和列表将要求的每一个配料都打印出一条语句</h6>
<h6 id="如果比萨店的青椒用完了该如何处理呢">如果比萨店的青椒用完了，该如何处理呢？</h6>
<h5 id="可在for循环中包含一条if语句">可在for循环中包含一条if语句：</h5>
<pre><code>request_toppings = ['mushrooms', 'green peppers', 'extra cheese']

for requested_topping in request_toppings:
    if requested_topping =='green peppers':
        print(&quot;Sorry,we are out of green peppers right now.&quot;)
    else:
        print(&quot;Adding &quot; + requested_topping + &quot;.&quot;)

print(&quot;\nFinished making your pizza!&quot;)
</code></pre>
<h6 id="运行-79">运行：</h6>
<pre><code>Adding mushrooms.
Sorry,we are out of green peppers right now.
Adding extra cheese.

Finished making your pizza!
</code></pre>
<h3 id="542-确定列表不是空的">5.4.2 确定列表不是空的</h3>
<h5 id="到目前为止对于处理的每个列表都做了一个简单的假设即假设它们都至少包含一个元素">到目前为止，对于处理的每个列表都做了一个简单的假设，即假设它们都至少包含一个元素。</h5>
<h5 id="我们马上就要让用户来提供存储在列表中的信息因此不能再假设循环运行时列表不是空的-有鉴于此在运行for循环前确定列表是否为空很重要">我们马上就要让用户来提供存储在列表中的信息，因此不能再假设循环运行时列表不是空的。有鉴于此，在运行for循环前确定列表是否为空很重要。</h5>
<h6 id="下面在制作比萨前检查顾客点的配料列表是否为空-如果列表是空的就向顾客确认他是否要点-普通比萨如果列表不为空就像前面的示例那样制作比萨">下面在制作比萨前检查顾客点的配料列表是否为空。如果列表是空的，就向顾客确认他是否要点 普通比萨；如果列表不为空，就像前面的示例那样制作比萨：</h6>
<h5 id="在-if-else-语句中用-for-循环">在 if else 语句中用 for 循环</h5>
<pre><code>requested_toppings = []
if requested_toppings:
    for requested_topping in requested_toppings:
        print(&quot;Adding &quot; + requested_topping + &quot;.&quot;)
    print(&quot;\nFinished making your pizza!&quot;)
else:
    print(&quot;Are you sure you want a plain pizza?&quot;)
</code></pre>
<h6 id="运行-80">运行：</h6>
<pre><code>Are you sure you want a plain pizza?
</code></pre>
<h5 id="在-if-语句中将列表名用在条件语句中时python将在列表中至少包含一个元素时返回-ture-并在列表为空时返回-false">在 if 语句中将列表名用在条件语句中时，Python将在列表中至少包含一个元素时返回 Ture ，并在列表为空时返回 false 。</h5>
<h3 id="543-使用多个列表">5.4.3 使用多个列表</h3>
<h5 id="下面的示例定义了两个列表其中第一个列表包含比萨店供应的配料而第二个列表包含顾客点的配料-这次对于-requested_toppings-中的每个元素都检查它是否是比萨店供应的配料再决定是否在比萨中添加它">下面的示例定义了两个列表，其中第一个列表包含比萨店供应的配料，而第二个列表包含顾客点的配料。这次对于 requested_toppings 中的每个元素，都检查它是否是比萨店供应的配料，再决定是否在比萨中添加它：</h5>
<pre><code>available_toppings = ['mushrooms','olives','green peppers','pepperoni','pineapple','extar cheese']

requested_toppings = ['mushrooms','french fries','extar cheese']
for requested_topping in requested_toppings:
    if requested_topping in available_toppings:
        print(&quot;Adding &quot; + requested_topping + &quot;.&quot;)
    else:
        print(&quot;Sorry, we don't have &quot; + requested_topping + &quot;.&quot;)

print(&quot;\nFinished making your pizza!&quot;)
</code></pre>
<h6 id="运行-81">运行：</h6>
<pre><code>Adding mushrooms.
Sorry, we don't have french fries.
Adding extar cheese.

Finished making your pizza!
</code></pre>
<h1 id="第6章-字典">第6章 字典</h1>
<h2 id="61-一个简单的字典">6.1 一个简单的字典</h2>
<h5 id="来看一个游戏其中包含一些外星人这些外星人的颜色和点数各不相同-下面是一个简单的字典存储了有关特定外星人的信息">来看一个游戏，其中包含一些外星人，这些外星人的颜色和点数各不相同。下面是一个简单的字典，存储了有关特定外星人的信息：</h5>
<pre><code>aline_0 = {'color': 'green', 'point': 5}

print(aline_0['color'])
print(aline_0['point'])
</code></pre>
<h6 id="运行-82">运行：</h6>
<pre><code>green
5
</code></pre>
<h2 id="62-使用字典">6.2 使用字典</h2>
<h5 id="在python中字典是一系列键-值对-每个键都与一个值相关联你可以使用键来访问与之相关联的值-与键相关联的值可以是数字-字符串-列表乃至字典-事实上可将任何python对象用作字典中的值">在Python中，字典是一系列键-值对。每个键都与一个值相关联，你可以使用键来访问与之相关联的值。与键相关联的值可以是数字、字符串、列表乃至字典。事实上，可将任何Python对象用作字典中的值。</h5>
<h6 id="在python中字典用放在花括号-中的一系列键-值对表示如前面的示例所示">在Python中，字典用放在花括号 {} 中的一系列键-值对表示，如前面的示例所示：</h6>
<pre><code>alien_0 = {'color': 'green', 'points': 5}
</code></pre>
<h5 id="键-值对是两个相关联的值-指定键时python将返回与之相关联的值-键和值之间用冒号分隔而键-值对之间用逗号分隔-在字典中你想存储多少个键-值对都可以">键-值对是两个相关联的值。指定键时，Python将返回与之相关联的值。键和值之间用冒号分隔，而键-值对之间用逗号分隔。在字典中，你想存储多少个键-值对都可以。</h5>
<h6 id="最简单的字典只有一个键-值对如下述修改后的字典-alien_0-所示">最简单的字典只有一个键-值对，如下述修改后的字典 alien_0 所示：</h6>
<pre><code>alien_0 = {'color': 'green'}
</code></pre>
<h5 id="这个字典只存储了一项有关-alien_0-的信息具体地说是这个外星人的颜色-在这个字典中字符串-color-是一个键与之相关联的值为-green">这个字典只存储了一项有关 alien_0 的信息，具体地说是这个外星人的颜色。在这个字典中，字符串 'color' 是一个键，与之相关联的值为 'green' 。</h5>
<h3 id="621-访问字典中的值">6.2.1 访问字典中的值</h3>
<h5 id="要获取与键相关联的值可依次指定字典名和放在方括号内的键如下所示">要获取与键相关联的值，可依次指定字典名和放在方括号内的键，如下所示：</h5>
<pre><code>ailne_0 = {'color':'green'}
print(aline_0['color'])
</code></pre>
<h6 id="这将返回字典aline_0中与键color相关联的值">这将返回字典aline_0中与键'color'相关联的值：</h6>
<pre><code>green
</code></pre>
<h5 id="字典中可包含任意数量的键-值对-例如下面是最初的字典aline_0其中包含两个键-值对">字典中可包含任意数量的键-值对。例如，下面是最初的字典aline_0，其中包含两个键-值对：</h5>
<pre><code>alien_0 = {'color': 'green', 'points': 5}
</code></pre>
<h5 id="现在你可以访问外星人-alien_0-的颜色和点数-如果玩家射杀了这个外星人你就可以使用下面的代码来确定玩家应获得多少个点">现在，你可以访问外星人 alien_0 的颜色和点数。如果玩家射杀了这个外星人，你就可以使用下面的代码来确定玩家应获得多少个点：</h5>
<pre><code>aline_0 = {'color': 'green', 'points': 5}

new_points = aline_0['points']
print(&quot;You just earned &quot; + str(new_points) + &quot; points!&quot;)
</code></pre>
<h5 id="上述代码首先定义了一个字典然后从这个字典中获取与键-points-相关联的值并将这个值存储在变量-new_points-中-接下来将这个整数转换为字符串并打印一条消息指出玩家获得了多少个点">上述代码首先定义了一个字典，然后从这个字典中获取与键 'points' 相关联的值，并将这个值存储在变量 new_points 中。接下来，将这个整数转换为字符串，并打印一条消息，指出玩家获得了多少个点：</h5>
<pre><code>You just earned 5 points!
</code></pre>
<h6 id="如果你在有外星人被射杀时都运行这段代码就会获取该外星人的点数">如果你在有外星人被射杀时都运行这段代码，就会获取该外星人的点数.</h6>
<h3 id="622-添加键-值对">6.2.2 添加键-值对</h3>
<h5 id="字典是一种动态结构可随时在其中添加键-值对-依次指定字典名-用方括号括起的键和相关联的值">字典是一种动态结构，可随时在其中添加键-值对。依次指定字典名、用方括号括起的键和相关联的值。</h5>
<pre><code>aline_0 = {'color': 'green', 'points': 5}
print(aline_0)

aline_0['x_position'] = 0
aline_0['y_position'] = 25
print(aline_0)
</code></pre>
<h6 id="运行-83">运行：</h6>
<pre><code>{'color': 'green', 'points': 5}
{'color': 'green', 'points': 5, 'x_position': 0, 'y_position': 25}
</code></pre>
<h3 id="623-先创建一个空字典">6.2.3 先创建一个空字典</h3>
<h5 id="有时候在空字典中添加键-值对是为了方便而有时候必须这样做-为此可先使用一堆空的花括号定义一个字典再分行添加各个键-值对">有时候，在空字典中添加键-值对是为了方便，而有时候必须这样做。为此，可先使用一堆空的花括号定义一个字典，再分行添加各个键-值对。</h5>
<pre><code>alien_0 = {}

alien_0['color'] = 'green'
alien_0['points'] = 5
print(alien_0)
</code></pre>
<h6 id="运行-84">运行：</h6>
<pre><code>{'color': 'green', 'points': 5}
</code></pre>
<h6 id="使用字典来存储用户提供的数据或在编写能自动生成大量键-值对的代码时通常都需要先定义一个空字典">使用字典来存储用户提供的数据或在编写能自动生成大量键 — 值对的代码时，通常都需要先定义一个空字典</h6>
<h3 id="624-修改字典中的值">6.2.4 修改字典中的值</h3>
<h5 id="要修改字典中的值可依次指定字典名-用方括号括起的键以及与该键相关联的新值-例如假设随着游戏的进行需要将一个外星人从绿色改为黄色">要修改字典中的值，可依次指定字典名、用方括号括起的键以及与该键相关联的新值。例如，假设随着游戏的进行，需要将一个外星人从绿色改为黄色：</h5>
<pre><code>alien_0 = {'color':'green'}
print(&quot;The alien is &quot; + alien_0['color'] + &quot;.&quot;)

alien_0['color'] = 'yellow'
print(&quot;The alien is now &quot; + alien_0['color'] + &quot;.&quot;)
</code></pre>
<h6 id="我们首先定义了一个表示外星人-alien_0-的字典其中只包含这个外星人的颜色-接下来我们将与键-color-相关联的值改为-yellow-输出表明这个外星人确实从绿色变成了黄色">我们首先定义了一个表示外星人 alien_0 的字典，其中只包含这个外星人的颜色。接下来，我们将与键 'color' 相关联的值改为 'yellow' 。输出表明，这个外星人确实从绿色变成了黄色：</h6>
<pre><code>The alien is green.
The alien is now yellow.
</code></pre>
<h5 id="对一个能够以不同速度移动的外星人的位置进行跟踪-为此我们将存储该外星人的当前速度并据此确定该外星人将向右移动多远">对一个能够以不同速度移动的外星人的位置进行跟踪。为此，我们将存储该外星人的当前速度，并据此确定该外星人将向右移动多远：</h5>
<pre><code>alien_0 = {'x_position': 0, 'y_position': 25, 'speed':'medium'}
print(&quot;Original x_position: &quot; + str(alien_0['x_position']))

# 向右移动外星人
# 据外星人当前速度决定将其移动多远
if alien_0['speed'] == 'slow':
    x_increment = 1
elif alien_0['speed'] == 'medium':
    x_increment = 2
else:
    x_increment = 3

# 新位置等于老位置加上增量
alien_0['x_position'] = alien_0['x_position'] + x_increment
print(&quot;New x_poistion: &quot; + str(alien_0['x_position']))
</code></pre>
<h6 id="运行-85">运行：</h6>
<pre><code>Original x_position: 0
New x_poistion: 2
</code></pre>
<h5 id="这种技术很棒通过修改外星人字典中的值可改变外星人的行为-例如要将这个速度中等的外星人变成速度很快的外星人可添加如下代码行">这种技术很棒：通过修改外星人字典中的值，可改变外星人的行为。例如，要将这个速度中等的外星人变成速度很快的外星人，可添加如下代码行：</h5>
<pre><code>alien_0['speed'] = slow
</code></pre>
<h3 id="625-删除键-值对">6.2.5 删除键-值对</h3>
<h5 id="对于字典中不再需要的信息可使用-del-语句将相应的键-值对彻底删除-使用-del-语句时必须指定字典名和要删除的键">对于字典中不再需要的信息，可使用 del 语句将相应的键 — 值对彻底删除。使用 del 语句时，必须指定字典名和要删除的键。</h5>
<pre><code>alien_0 = {'color': 'green', 'points': 5}
print(alien_0)

del alien_0['points']
print(alien_0)
</code></pre>
<h6 id="代码行让python将键-points-从字典-alien_0-中删除同时删除与这个键相关联的值">代码行让Python将键 'points' 从字典 alien_0 中删除，同时删除与这个键相关联的值。</h6>
<h6 id="运行-86">运行：</h6>
<pre><code>{'color': 'green', 'points': 5}
{'color': 'green'}
</code></pre>
<h6 id="输出表明键-points-及其值-5-已从字典中删除但其他键-值对未受影响">输出表明，键 'points' 及其值 5 已从字典中删除，但其他键 — 值对未受影响：</h6>
<h5 id="注意-删除的键值对永远消失了"><mark><mark>注意</mark></mark> 删除的键值对永远消失了</h5>
<h3 id="626-由类似对象组成的字典">6.2.6 由类似对象组成的字典</h3>
<h5 id="在前面的示例中字典存储的是一个对象游戏中的一个外星人的多种信息但你也可以使用字典来存储众多对象的同一种信息-例如假设你要调查很多人询问他们最喜欢的编程语言可使用一个字典来存储这种简单调查的结果如下所示">在前面的示例中，字典存储的是一个对象（游戏中的一个外星人）的多种信息，但你也可以使用字典来存储众多对象的同一种信息。例如，假设你要调查很多人，询问他们最喜欢的编程语言，可使用一个字典来存储这种简单调查的结果，如下所示：</h5>
<pre><code>favorite_languages = {
    'jen': 'python',
    'sarah': 'c',
    'edward': 'ruby',
    'phil': 'python',
    }
</code></pre>
<h5 id="正如你看到的我们将一个较大的字典放在了多行中-其中每个键都是一个被调查者的名字而每个值都是被调查者喜欢的语言-确定需要使用多行来定义字典时在输入左花括号后按回车键再在下一行缩进四个空格指定第一个键-值对并在它后面加上一个逗号-此后你再次按回车键时文本编辑器将自动缩进后续键-值对且缩进量与第一个键-值对相同">正如你看到的，我们将一个较大的字典放在了多行中。其中每个键都是一个被调查者的名字，而每个值都是被调查者喜欢的语言。确定需要使用多行来定义字典时，在输入左花括号后按回车键，再在下一行缩进四个空格，指定第一个键 — 值对，并在它后面加上一个逗号。此后你再次按回车键时，文本编辑器将自动缩进后续键 — 值对，且缩进量与第一个键 — 值对相同。</h5>
<h5 id="定义好字典后在最后一个键-值对的下一行添加一个右花括号并缩进四个空格使其与字典中的键对齐-另外一种不错的做法是在最后一个键-值对后面也加上逗号为以后在下一行添加键-值对做好准备">定义好字典后，在最后一个键 — 值对的下一行添加一个右花括号，并缩进四个空格，使其与字典中的键对齐。另外一种不错的做法是在最后一个键 — 值对后面也加上逗号，为以后在下一行添加键 — 值对做好准备</h5>
<h5 id="注意-对于较长的列表和字典大多数编辑器都有以类似方式设置其格式的功能-对于较长的字典还有其他一些可行的格式设置方式因此在你的编辑器或其他源代码中你可能会看到稍微不同的格式设置方式"><mark><mark>注意</mark></mark> 对于较长的列表和字典，大多数编辑器都有以类似方式设置其格式的功能。对于较长的字典，还有其他一些可行的格式设置方式，因此在你的编辑器或其他源代码中，你可能会看到稍微不同的格式设置方式。</h5>
<h6 id="给定被调查者的名字可以使用这个字典轻松地获悉他喜欢的语言">给定被调查者的名字，可以使用这个字典轻松地获悉他喜欢的语言</h6>
<pre><code>favorite_languages = {
    'jen': 'python',
    'sarah': 'c',
    'edward': 'ruby',
    'phil': 'python',
    }

print(&quot;Sarah's favorite language is &quot; + 
     favorite_languages['sarah'].title() + 
      &quot;.&quot;)
</code></pre>
<h6 id="运行-87">运行：</h6>
<pre><code>Sarah's favorite language is C.
</code></pre>
<h6 id="这个示例还演示了如何将较长的-print-语句分成多行-单词-print-比大多数字典名都短因此让输出的第一部分紧跟在左括号后面是合理的-请选择在合适的地方拆分要打印的内容并在第一行末尾加上一个拼接运算符-按回车键进入-print-语句的后续各行并使用-tab-键将它们对齐并缩进一级-指定要打印的所有内容后在-print-语句的最后一行末尾加上右括号">这个示例还演示了如何将较长的 print 语句分成多行。单词 print 比大多数字典名都短，因此让输出的第一部分紧跟在左括号后面是合理的。请选择在合适的地方拆分要打印的内容，并在第一行末尾加上一个拼接运算符（ + ）。按回车键进入 print 语句的后续各行，并使用 Tab 键将它们对齐并缩进一级。指定要打印的所有内容后，在 print 语句的最后一行末尾加上右括号。</h6>
<h2 id="63-遍历字典">6.3 遍历字典</h2>
<h3 id="631-遍历所有的键-值对">6.3.1 遍历所有的键-值对</h3>
<h5 id="要获悉字典中的所有信息可以使用一个-for-循环来遍历这个字典">要获悉字典中的所有信息，可以使用一个 for 循环来遍历这个字典：</h5>
<pre><code>user_0 = {
    'username': 'efermi',
    'first': 'enrico',
    'last': 'fermi',
    }
for key, value in user_0.items():
    print(&quot;\nKey: &quot; + key)
    print(&quot;\nValue: &quot; + value)
</code></pre>
<h5 id="要编写用于遍历字典的-for-循环可声明两个变量用于存储键-值对中的键和值-对于这两个变量可使用任何名称-下面的代码使用了简单的变量名这完全可行">要编写用于遍历字典的 for 循环，可声明两个变量，用于存储键 — 值对中的键和值。对于这两个变量，可使用任何名称。下面的代码使用了简单的变量名，这完全可行：</h5>
<pre><code>for k, v in user_0.items()
</code></pre>
<h6 id="for-语句的第二部分包含字典名和方法-items-它返回一个键-值对列表-接下来for-循环依次将每个键-值对存储到指定的两个变量中-在前面的示例中我们使用这两个变量来打印每个键及其相关联的值-第一条-print-语句中的-n-确保在输出每个键-值对前都插入一个空行">for 语句的第二部分包含字典名和方法 items() ，它返回一个键-值对列表。接下来，for 循环依次将每个键-值对存储到指定的两个变量中。在前面的示例中，我们使用这两个变量来打印每个键及其相关联的值。第一条 print 语句中的 &quot;\n&quot; 确保在输出每个键-值对前都插入一个空行：</h6>
<h6 id="运行-88">运行：</h6>
<pre><code>Key: username

Value: efermi

Key: first

Value: enrico

Key: last

Value: fermi
</code></pre>
<h5 id="注意-即便遍历字典时键-值对的返回顺序也与存储顺序不同-python不关心键-值对的存储顺序而只跟踪键和值之间的关联关系"><mark><mark>注意</mark></mark> 即便遍历字典时，键-值对的返回顺序也与存储顺序不同。Python不关心键-值对的存储顺序，而只跟踪键和值之间的关联关系。</h5>
<h3 id="632-遍历字典中的所有键p108">6.3.2 遍历字典中的所有键（p108）</h3>
<h5 id="在不需要使用字典中的值时方法-keys-很有用-下面来遍历字典-favorite_languages-并将每个被调查者的名字都打印出来">在不需要使用字典中的值时，方法 keys() 很有用。下面来遍历字典 favorite_languages ，并将每个被调查者的名字都打印出来：</h5>
<pre><code>favorite_languages = {
    'jen': 'python',
    'sarah': 'c',
    'edward': 'ruby',
    'phil': 'python'
    }

for name in favorite_languages.keys():
    print(name.title())
</code></pre>
<h6 id="for-处的代码行让-python-提取字典-favorite_languages-中的所有键并依次将它们存储到变量-name-中-输出列出了每个被调查者的名字">for 处的代码行让 Python 提取字典 favorite_languages 中的所有键，并依次将它们存储到变量 name 中。输出列出了每个被调查者的名字：</h6>
<pre><code>Jen
Sarah
Edward
Phil
</code></pre>
<h5 id="遍历字典时会默认遍历所有的键因此如果将上述代码中的-for-name-in-favorite_languageskeys-替换为-for-name-in-favorite_languages-输出将不变-如果显式地使用方法-keys-可让代码更容易理解你可以选择这样做但如果你愿意也可省略它">遍历字典时，会默认遍历所有的键，因此，如果将上述代码中的 for name in favorite_languages.keys(): 替换为 for name in favorite_languages: ，输出将不变。如果显式地使用方法 keys() 可让代码更容易理解，你可以选择这样做，但如果你愿意，也可省略它。</h5>
<h5 id="在这种循环中可使用当前键来访问与之相关联的值-下面来打印两条消息指出两位朋友喜欢的语言-我们像前面一样遍历字典中的名字但在名字为指定朋友的名字时打印一条消息指出其喜欢的语言">在这种循环中，可使用当前键来访问与之相关联的值。下面来打印两条消息，指出两位朋友喜欢的语言。我们像前面一样遍历字典中的名字，但在名字为指定朋友的名字时，打印一条消息，指出其喜欢的语言：</h5>
<pre><code>favorite_languages = {
    'jen': 'python',
    'sarah': 'c',
    'edward': 'ruby',
    'phil': 'python'
    }

friends = ['phil', 'sarah']
for name in favorite_languages.keys():
    print(name.title())

    if name in friends:
        print(&quot; Hi &quot; + name.title() + 
            &quot; , I see your favorite language is &quot; + 
            favorite_languages[name].title() + &quot; ! &quot;)
</code></pre>
<h6 id="运行-89">运行：</h6>
<pre><code>Jen
Sarah
 Hi Sarah , I see your favorite language is C !
Edward
Phil
 Hi Phil , I see your favorite language is Python !
</code></pre>
<h5 id="还可以使用-keys-确定某个人是否接受了调查-下面的代码确定erin是否接受了调查">还可以使用 keys() 确定某个人是否接受了调查。下面的代码确定Erin是否接受了调查：</h5>
<pre><code>favorite_languages = {
    'jen': 'python',
    'sarah': 'c',
    'edward': 'ruby',
    'phil': 'python'
    }

if 'erin' not in favorite_languages.keys():
    print(&quot;Erin, please take our poll !&quot;)
</code></pre>
<h6 id="方法-keys-并非只能用于遍历实际上它返回一个列表其中包含字典中的所有键因此-if-代码行只是核实-erin-是否包含在这个列表中-由于她并不包含在这个列表中因此打印一条消息邀请她参加调查">方法 keys() 并非只能用于遍历；实际上，它返回一个列表，其中包含字典中的所有键，因此 if 代码行只是核实 'erin' 是否包含在这个列表中。由于她并不包含在这个列表中，因此打印一条消息，邀请她参加调查：</h6>
<pre><code>Erin, please take our poll !
</code></pre>
<h3 id="633-按顺序遍历字典中的所有键">6.3.3 按顺序遍历字典中的所有键</h3>
<h5 id="要以特定的顺序返回元素一种办法是在-for-循环中对返回的键进行排序-为此可使用函数-sorted-来获得按特定顺序排列的键列表的副本">要以特定的顺序返回元素，一种办法是在 for 循环中对返回的键进行排序。为此，可使用函数 sorted() 来获得按特定顺序排列的键列表的副本：</h5>
<pre><code>favorite_languages = {
    'jen': 'python',
    'sarah': 'c',
    'edward': 'ruby',
    'phil': 'python'
    }

for name in sorted(favorite_languages.keys()):
    print(name.title() + &quot;, thank you for taking the poll.&quot;)
</code></pre>
<h6 id="这条-for-语句类似于其他-for-语句但对方法-dictionarykeys-的结果调用了函数-sorted-这让python列出字典中的所有键并在遍历前对这个列表进行排序-输出表明按顺序显示了所有被调查者的名字">这条 for 语句类似于其他 for 语句，但对方法 dictionary.keys() 的结果调用了函数 sorted() 。这让Python列出字典中的所有键，并在遍历前对这个列表进行排序。输出表明，按顺序显示了所有被调查者的名字：</h6>
<pre><code>Edward, thank you for taking the poll.
Jen, thank you for taking the poll.
Phil, thank you for taking the poll.
Sarah, thank you for taking the poll.
</code></pre>
<h3 id="634-遍历字典中所有的值">6.3.4 遍历字典中所有的值</h3>
<h5 id="使用方法-values-它返回一个值列表而不包含任何键">使用方法 values() ，它返回一个值列表，而不包含任何键。</h5>
<h5 id="例如如果我们想获得一个这样的列表即其中只包含被调查者选择的各种语言而不包含被调查者的名字可以这样做">例如，如果我们想获得一个这样的列表，即其中只包含被调查者选择的各种语言，而不包含被调查者的名字，可以这样做：</h5>
<pre><code>favorite_languages = {
    'jen': 'python',
    'sarah': 'c',
    'edward': 'ruby',
    'phil': 'python'
    }

print(&quot;The following languages have been mentioned&quot;)
for language in favorite_languages.values():
    print(language.title())
</code></pre>
<h6 id="这条-for-语句提取字典中的每个值并将它们依次存储到变量-language-中-通过打印这些值就获得了一个列表其中包含被调查者选择的各种语言">这条 for 语句提取字典中的每个值，并将它们依次存储到变量 language 中。通过打印这些值，就获得了一个列表，其中包含被调查者选择的各种语言：</h6>
<pre><code>The following languages have been mentioned
Python
C
Ruby
Python
</code></pre>
<h5 id="这种做法提取字典中所有的值而没有考虑是否重复-涉及的值很少时这也许不是问题但如果被调查者很多最终的列表可能包含大量的重复项-为剔除重复项可使用集合set-集合类似于列表但每个元素都必须是独一无二的">这种做法提取字典中所有的值，而没有考虑是否重复。涉及的值很少时，这也许不是问题，但如果被调查者很多，最终的列表可能包含大量的重复项。为剔除重复项，可使用集合（set）。集合类似于列表，但每个元素都必须是独一无二的：</h5>
<h6 id="更改-for-语句">更改 for 语句：</h6>
<pre><code>for language in set(favorite_languages.values()):
</code></pre>
<h6 id="通过对包含重复元素的列表调用-set-可让python找出列表中独一无二的元素并使用这些元素来创建一个集合-我们使用了-set-来提取-favorite_languagesvalues-中不同的语言-结果是一个不重复的列表其中列出了被调查者提及的所有语言">通过对包含重复元素的列表调用 set() ，可让Python找出列表中独一无二的元素，并使用这些元素来创建一个集合。我们使用了 set() 来提取 favorite_languages.values() 中不同的语言。结果是一个不重复的列表，其中列出了被调查者提及的所有语言：</h6>
<pre><code>The following languages have been mentioned
C
Python
Ruby
</code></pre>
<h2 id="64-嵌套">6.4 嵌套</h2>
<h4 id="有时候需要将一系列字典存储在列表中或将列表作为值存储在字典中这称为嵌套-你可以在列表中嵌套字典-在字典中嵌套列表甚至在字典中嵌套字典-正如下面的示例将演示的嵌套是一项强大的功能">有时候，需要将一系列字典存储在列表中，或将列表作为值存储在字典中，这称为嵌套。你可以在列表中嵌套字典、在字典中嵌套列表甚至在字典中嵌套字典。正如下面的示例将演示的，嵌套是一项强大的功能。</h4>
<h3 id="641-字典列表">6.4.1 字典列表</h3>
<h5 id="字典-alien_0-包含一个外星人的各种信息但无法存储第二个外星人的信息更别说屏幕上全部外星人的信息了-如何管理成群结队的外星人呢一种办法是创建一个外星人列表其中每个外星人都是一个字典包含有关该外星人的各种信息-例如下面的代码创建一个包含三个外星人的列表">字典 alien_0 包含一个外星人的各种信息，但无法存储第二个外星人的信息，更别说屏幕上全部外星人的信息了。如何管理成群结队的外星人呢？一种办法是创建一个外星人列表，其中每个外星人都是一个字典，包含有关该外星人的各种信息。例如，下面的代码创建一个包含三个外星人的列表：</h5>
<pre><code>alien_0 = {'color': 'green', 'points': 5}
alien_1 = {'color': 'yellow', 'points': 10}
alien_2 = {'color': 'red', 'points': 15}

aliens = [alien_0, alien_1, alien_2]

for alien in aliens:
    print(alien)
</code></pre>
<h6 id="我们首先创建了三个字典其中每个字典都表示一个外星人-在处我们将这些字典都放到一个名为-aliens-的列表中-最后我们遍历这个列表并将每个外星人都打印出来">我们首先创建了三个字典，其中每个字典都表示一个外星人。在处，我们将这些字典都放到一个名为 aliens 的列表中。最后，我们遍历这个列表，并将每个外星人都打印出来：</h6>
<pre><code>{'color': 'green', 'points': 5}
{'color': 'yellow', 'points': 10}
{'color': 'red', 'points': 15}
</code></pre>
<h5 id="更符合现实的情形是外星人不止三个且每个外星人都是使用代码自动生成的-在下面的示例中我们使用-range-生成了30个外星人">更符合现实的情形是，外星人不止三个，且每个外星人都是使用代码自动生成的。在下面的示例中，我们使用 range() 生成了30个外星人：</h5>
<pre><code># 创建一个用于存储外星人的空列表
aliens = []

# 创建30个绿色的外星人
for alien_number in range(30):
    new_alien = {'color': 'green', 'point': '5', 'speed': 'slow'}
    aliens.append(new_alien)

# 显示前五个外星人
for alien in aliens[:5]:
    print(alien)
print(&quot;...&quot;)

# 显示创建了多少个外星人
print(&quot;Total number of aliens: &quot; + str(len(aliens)))
</code></pre>
<h6 id="range-返回一系列数字其唯一的用途是告诉python我们要重复这个循环多少次-每次执行这个循环时都创建一个外星人并将其附加到列表-aliens-末尾然后使用一个切片来打印前五个外星人在最后打印列表的长度以证明确实创建了30个外星人">range() 返回一系列数字，其唯一的用途是告诉Python我们要重复这个循环多少次。每次执行这个循环时，都创建一个外星人，并将其附加到列表 aliens 末尾，然后使用一个切片来打印前五个外星人；在最后打印列表的长度，以证明确实创建了30个外星人：</h6>
<pre><code>{'color': 'green', 'point': '5', 'speed': 'slow'}
{'color': 'green', 'point': '5', 'speed': 'slow'}
{'color': 'green', 'point': '5', 'speed': 'slow'}
{'color': 'green', 'point': '5', 'speed': 'slow'}
{'color': 'green', 'point': '5', 'speed': 'slow'}
...
Total number of aliens: 30
</code></pre>
<h5 id="这些外星人都具有相同的特征但在python看来每个外星人都是独立的这让我们能够独立地修改每个外星人">这些外星人都具有相同的特征，但在Python看来，每个外星人都是独立的，这让我们能够独立地修改每个外星人。</h5>
<h5 id="在什么情况下需要处理成群结队的外星人呢想象一下可能随着游戏的进行有些外星人会变色且移动速度会加快-必要时我们可以使用-for-循环和-if-语句来修改某些外星人的颜色">在什么情况下需要处理成群结队的外星人呢？想象一下，可能随着游戏的进行，有些外星人会变色且移动速度会加快。必要时，我们可以使用 for 循环和 if 语句来修改某些外星人的颜色。</h5>
<h5 id="例如要将前三个外星人修改为黄色的-速度为中等且值10个点可以这样做">例如，要将前三个外星人修改为黄色的、速度为中等且值10个点，可以这样做：</h5>
<pre><code># 创建一个用于存储外星人的空列表
aliens = []

# 创建30个绿色的外星人
for alien_number in range(30):
    new_alien = {'color': 'green', 'point': '5', 'speed': 'slow'}
    aliens.append(new_alien)

for alien in aliens[0:3]:
    if alien['color'] == 'green':
        alien['color'] = 'yellow'
        alien['point'] = 10
        alien['speed'] = 'medium'

# 显示前五个外星人
for alien in aliens[:5]:
    print(alien)
print(&quot;...&quot;)

# 显示创建了多少个外星人
print(&quot;Total number of aliens: &quot; + str(len(aliens)))
</code></pre>
<h6 id="鉴于我们要修改前三个外星人需要遍历一个只包含这些外星人的切片-当前所有外星人都是绿色的但情况并非总是如此因此我们编写了一条-if-语句来确保只修改绿色外星人-如果外星人是绿色的我们就将其颜色改为-yellow-将其速度改为-medium-并将其点数改为-10-如下面的输出所示">鉴于我们要修改前三个外星人，需要遍历一个只包含这些外星人的切片。当前，所有外星人都是绿色的，但情况并非总是如此，因此我们编写了一条 if 语句来确保只修改绿色外星人。如果外星人是绿色的，我们就将其颜色改为 'yellow' ，将其速度改为 'medium' ，并将其点数改为 10 ，如下面的输出所示：</h6>
<pre><code>{'color': 'yellow', 'point': 10, 'speed': 'medium'}
{'color': 'yellow', 'point': 10, 'speed': 'medium'}
{'color': 'yellow', 'point': 10, 'speed': 'medium'}
{'color': 'green', 'point': '5', 'speed': 'slow'}
{'color': 'green', 'point': '5', 'speed': 'slow'}
...
Total number of aliens: 30
</code></pre>
<h5 id="可以进一步扩展这个循环在其中添加一个-elif-代码块将黄色外星人改为移动速度快且值15个点的红色外星人如下所示这里只列出了循环而没有列出整个程序">可以进一步扩展这个循环，在其中添加一个 elif 代码块，将黄色外星人改为移动速度快且值15个点的红色外星人，如下所示（这里只列出了循环，而没有列出整个程序）：</h5>
<pre><code>for alien in aliens[0:3]:
if alien['color'] ==     'green':
alien['color'] = 'yellow'
alien['speed'] = 'medium'
alien['points'] = 10
elif alien['color'] == 'yellow':
alien['color'] = 'red'
alien['speed'] = 'fast'
alien['points'] = 15
</code></pre>
<h5 id="经常需要在列表中包含大量的字典而其中每个字典都包含特定对象的众多信息-例如你可能需要为网站的每个用户创建一个字典就像631节的userpy中那样并将这些字典存储在一个名为-users-的列表中-在这个列表中所有字典的结构都相同因此你可以遍历这个列表并以相同的方式处理其中的每个字典">经常需要在列表中包含大量的字典，而其中每个字典都包含特定对象的众多信息。例如，你可能需要为网站的每个用户创建一个字典（就像6.3.1节的user.py中那样），并将这些字典存储在一个名为 users 的列表中。在这个列表中，所有字典的结构都相同，因此你可以遍历这个列表，并以相同的方式处理其中的每个字典。</h5>
<h3 id="642-在字典中存储列表">6.4.2 在字典中存储列表</h3>
<h4 id="有时需要将列表存储在字典中而不是将字典存储在列表中">有时需要将列表存储在字典中，而不是将字典存储在列表中。</h4>
<h5 id="下面存储了披萨的两方面信息外皮类型和配料列表-其中的配料列表是一个与键toppings相关联的值-要访问该列表我们使用字典名和键toppings就像访问字典中的其他值一样-这样将返回一个配料列表而不是单个值">下面存储了披萨的两方面信息：外皮类型和配料列表。其中的配料列表是一个与键'toppings'相关联的值。要访问该列表，我们使用字典名和键'toppings'，就像访问字典中的其他值一样。这样将返回一个配料列表，而不是单个值。</h5>
<pre><code># 存储所点单的披萨的信息
pizza = {
    'crust': 'thick',
    'toppings': ['mushrooms', 'extar cheese'],
    }

# 概述所点的披萨
print(&quot;You ordered a &quot; + pizza['crust'] + &quot;-crust pizza &quot; + &quot;with the following toppings: &quot;)

for topping in pizza['toppings']:
    print(&quot;\t&quot; + topping)
</code></pre>
<h6 id="先创建一个-pizza-字典其中一个键为crust与之相关联的值是字符串thick下一个键是toppings与其关联的值是一个列表为了打印配料使用了for循环而为了访问配料列表使用了键toppings下面输出概述了要做的披萨">先创建一个 pizza 字典，其中一个键为'crust'，与之相关联的值是字符串'thick'；下一个键是'toppings'，与其关联的值是一个列表，为了打印配料，使用了for循环，而为了访问配料列表，使用了键'toppings'，下面输出概述了要做的披萨：</h6>
<pre><code>You ordered a thick-crust pizza with the following toppings:
        mushrooms
        extar cheese
</code></pre>
<h5 id="每当需要在字典中将一个键关联到多个值时都可以在字典中嵌套一个列表-如果被调查者喜欢多种编程语言我们可以将其的回答存放在列表中与每个被调查者相关联的都是一个语言列表而不是一种语言因此在遍历该字典的for循环中我们需要再使用一个for循环来遍历与被调查者相关联的语言列表">每当需要在字典中将一个键关联到多个值时，都可以在字典中嵌套一个列表。如果被调查者喜欢多种编程语言，我们可以将其的回答存放在列表中，与每个被调查者相关联的都是一个语言列表，而不是一种语言；因此，在遍历该字典的for循环中，我们需要再使用一个for循环来遍历与被调查者相关联的语言列表。</h5>
<pre><code>faorite_languages = {
    'jen': ['python', 'ruby'],
    'sarah': ['c'],
    'edward': ['ruby', 'go'],
    'phli': ['python', 'haskell'],
    }

for name, languages in faorite_languages.items():
    print(&quot;\n&quot; + name.title() + &quot;'s favorite lanuages are: &quot;)
    for language in languages:
        print(&quot;\t&quot; + language.title())
</code></pre>
<h6 id="遍历字典时使用了变量languages来依次存储字典中的每个值因为这些值都是列表在遍历字典的主循环中再使用一个for循环来遍历每个人喜欢的语言列表现在每个人想列出多少种喜欢的语言都可以">遍历字典时使用了变量languages来依次存储字典中的每个值，因为这些值都是列表，在遍历字典的主循环中，再使用一个for循环来遍历每个人喜欢的语言列表，现在每个人想列出多少种喜欢的语言都可以：</h6>
<pre><code>Jen's favorite lanuages are:
        Python
        Ruby

Sarah's favorite lanuages are:
        C

Edward's favorite lanuages are:
        Ruby
        Go

Phli's favorite lanuages are:
        Python
        Haskell
</code></pre>
<h6 id="为进一步改进这个程序可在遍历字典的-for-循环开头添加一条-if-语句通过查看-lenlanguages-的值来确定当前的被调查者喜欢的语言是否有多种-如果他喜欢的语言有多种就像以前一样显示输出如果只有一种就相应修改输出的措辞如显示-sarahs-favorite-languageis-c">为进一步改进这个程序，可在遍历字典的 for 循环开头添加一条 if 语句，通过查看 len(languages) 的值来确定当前的被调查者喜欢的语言是否有多种。如果他喜欢的语言有多种，就像以前一样显示输出；如果只有一种，就相应修改输出的措辞，如显示 Sarah's favorite languageis C 。</h6>
<h5 id="注意-列表和字典的嵌套层级不应太多-如果嵌套层级比前面的示例多得多很可能有更简单的解决问题的方案"><mark>注意</mark> 列表和字典的嵌套层级不应太多。如果嵌套层级比前面的示例多得多，很可能有更简单的解决问题的方案。</h5>
<h3 id="643-在字典中存储字典">6.4.3 在字典中存储字典</h3>
<h4 id="如果有多个网站用户每个都有独特的用户名可在字典中将用户名作为键然后将每位用户的信息存储在一个字典中并将该字典作为与用户名相关联的值">如果有多个网站用户，每个都有独特的用户名，可在字典中将用户名作为键，然后将每位用户的信息存储在一个字典中，并将该字典作为与用户名相关联的值。</h4>
<h5 id="下面对于每位用户存储其三项信息名-姓和居住地如何访问这些信息通过遍历所有的用户名并访问与每个用户名相关联的信息字典">下面对于每位用户，存储其三项信息：名、姓和居住地；如何访问这些信息，通过遍历所有的用户名，并访问与每个用户名相关联的信息字典：</h5>
<pre><code>users = {
    'aeinstein': {
        'first': 'albert',
        'last': 'einstein',
        'location': 'princeton',
        },

    'mcurie': {
        'first': 'marie',
        'last': 'curie',
        'location': 'paris',
        },
    }

for username, user_info in users.items():
    print(&quot;\nUsername: &quot; + username)
    full_name = user_info['first'] + &quot; &quot; + user_info['last']
    location = user_info[s'location']

    print(&quot;\tFull name: &quot; + full_name.title())
    print(&quot;\tLocation: &quot; + location.title())
</code></pre>
<h6 id="先定义一个字典users其中包含两个键用户名aeinstein和mcurie与每个键相关联的值都是一个字典其中包含用户的名-姓和居住地-用for循环遍历users将其每个键存储在变量username中并依次将与当前键相关联的字典存储在变量user_info中-然后循环打印出用户名">先定义一个字典users，其中包含两个键：用户名'aeinstein'和'mcurie'；与每个键相关联的值都是一个字典，其中包含用户的名、姓和居住地。用for循环遍历users，将其每个键存储在变量username中，并依次将与当前键相关联的字典存储在变量user_info中。然后循环打印出用户名。</h6>
<h6 id="然后访问内部的字典变量user_info包含用户信息字典而该字典包含三个键first-last-location对于每位用户我们都使用这些键来生成整洁的姓名和居住地然后打印出来">然后访问内部的字典，变量user_info包含用户信息字典，而该字典包含三个键：'first', 'last', 'location'；对于每位用户，我们都使用这些键来生成整洁的姓名和居住地，然后打印出来：</h6>
<pre><code>Username: aeinstein
        Full name: Albert Einstein
        Location: Princeton

Username: mcurie
        Full name: Marie Curie
        Location: Paris
</code></pre>
<h5 id="注意-表示每位用户的字典的结构都相同虽然python并未要求但这使得嵌套的字典处理起来更容易-倘若表示美味用户的字典都包含不同的键for循环内部的代码将更复杂"><mark>注意</mark> 表示每位用户的字典的结构都相同，虽然Python并未要求，但这使得嵌套的字典处理起来更容易。倘若表示美味用户的字典都包含不同的键，for循环内部的代码将更复杂。</h5>
<h1 id="第7章-用户输入和while循环">第7章 用户输入和while循环</h1>
<h4 id="在本章中你将学习如何接受用户输入让程序能够对其进行处理-在程序需要一个名字时你需要提示用户输入该名字程序需要一个名单时你需要提示用户输入一系列名字-为此你需要使用函数-input">在本章中，你将学习如何接受用户输入，让程序能够对其进行处理。在程序需要一个名字时，你需要提示用户输入该名字；程序需要一个名单时，你需要提示用户输入一系列名字。为此，你需要使用函数 input() 。</h4>
<h4 id="你还将学习如何让程序不断地运行让用户能够根据需要输入信息并在程序中使用这些信息-为此你需要使用-while-循环让程序不断地运行直到指定的条件不满足为止-通过获取用户输入并学会控制程序的运行时间可编写出交互式程序">你还将学习如何让程序不断地运行，让用户能够根据需要输入信息，并在程序中使用这些信息。为此，你需要使用 while 循环让程序不断地运行，直到指定的条件不满足为止。通过获取用户输入并学会控制程序的运行时间，可编写出交互式程序。</h4>
<h2 id="71-函数input的工作原理">7.1 函数input()的工作原理</h2>
<h5 id="函数-input-让程序暂停运行等待用户输入一些文本-获取用户输入后python将其存储在一个变量中以方便你使用">函数 input() 让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其存储在一个变量中，以方便你使用。</h5>
<h5 id="例如下面的程序让用户输入一些文本再将这些文本呈现给用户">例如，下面的程序让用户输入一些文本，再将这些文本呈现给用户：</h5>
<pre><code>message = input(&quot;Tell me something, and I will repeat it back to you: &quot;)
print(message)
</code></pre>
<h6 id="函数-input-接受一个参数即要向用户显示的提示或说明让用户知道该如何做-在这个示例中python运行第1行代码时用户将看到提示-tell-me-something-and-i-will-repeat-it-backto-you-程序等待用户输入并在用户按回车键后继续运行-输入存储在变量-message-中接下来的-printmessage-将输入呈现给用户">函数 input() 接受一个参数：即要向用户显示的提示或说明，让用户知道该如何做。在这个示例中，Python运行第1行代码时，用户将看到提示 Tell me something, and I will repeat it backto you: 。程序等待用户输入，并在用户按回车键后继续运行。输入存储在变量 message 中，接下来的 print(message) 将输入呈现给用户：</h6>
<pre><code>Tell me something, and I will repeat it back to you: Hello World ！
Hello World ！
</code></pre>
<h5 id="注意-sublime-text不能运行提示用户输入的程序-你可以使用sublime-text来编写提示用户输入的程序但必须从终端运行它们-详情请参阅14节"><mark>注意</mark> Sublime Text不能运行提示用户输入的程序。你可以使用Sublime Text来编写提示用户输入的程序，但必须从终端运行它们。详情请参阅1.4节。</h5>
<h2 id="72-while循环简介">7.2 while循环简介</h2>
<h4 id="for-循环用于针对集合中的每个元素都一个代码块而-while-循环不断地运行直到指定的条件不满足为止">for 循环用于针对集合中的每个元素都一个代码块，而 while 循环不断地运行，直到指定的条件不满足为止。</h4>
<h2 id="73-使用while循环来处理列表和字典">7.3 使用while循环来处理列表和字典</h2>
<h4 id="到目前为止我们每次都只处理了一项用户信息获取用户的输入再将输入打印出来或作出应答循环再次运行时我们获悉另一个输入值并作出响应-然而要记录大量的用户和信息需要在-while-循环中使用列表和字典-for-循环是一种遍历列表的有效方式但在-for-循环中不应修改列表否则将导致python难以跟踪其中的元素-要在遍历列表的同时对其进行修改可使用-while-循环-通过将-while-循环同列表和字典结合起来使用可收集-存储并组织大量输入供以后查看和显示">到目前为止，我们每次都只处理了一项用户信息：获取用户的输入，再将输入打印出来或作出应答；循环再次运行时，我们获悉另一个输入值并作出响应。然而，要记录大量的用户和信息，需要在 while 循环中使用列表和字典。for 循环是一种遍历列表的有效方式，但在 for 循环中不应修改列表，否则将导致Python难以跟踪其中的元素。要在遍历列表的同时对其进行修改，可使用 while 循环。通过将 while 循环同列表和字典结合起来使用，可收集、存储并组织大量输入，供以后查看和显示。</h4>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://https://dazhuang0521.github.io/dz521.github.io/post/hello-gridea/</id>
        <link href="https://https://dazhuang0521.github.io/dz521.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>